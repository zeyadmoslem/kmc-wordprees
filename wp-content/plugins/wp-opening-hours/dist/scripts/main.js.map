{"version":3,"sources":["jquery.ui.timepicker.js","ExtendedSettings.js","Holidays.js","IrregularOpenings.js","OpSet.js","Periods.js","ShortcodeBuilder.js"],"names":["$","extend","ui","timepicker","version","PROP_NAME","tpuuid","Date","getTime","Timepicker","this","debug","_curInst","_disabledInputs","_timepickerShowing","_inDialog","_dialogClass","_mainDivId","_inlineClass","_currentClass","_dayOverClass","regional","hourText","minuteText","amPmText","closeButtonText","nowButtonText","deselectButtonText","_defaults","showOn","button","showAnim","showOptions","appendText","beforeShow","onSelect","onClose","timeSeparator","periodSeparator","showPeriod","showPeriodLabels","showLeadingZero","showMinutesLeadingZero","altField","defaultTime","myPosition","atPosition","onHourShow","onMinuteShow","hours","starts","ends","minutes","interval","manual","rows","showHours","showMinutes","optionalMinutes","showCloseButton","showNowButton","showDeselectButton","maxTime","hour","minute","minTime","tpDiv","extendRemove","target","props","name","undefined","prototype","markerClassName","log","console","apply","arguments","_widgetTimepicker","setDefaults","settings","_attachTimepicker","inlineSettings","attrName","attrValue","getAttribute","eval","err","nodeName","toLowerCase","inline","id","uuid","inst","_newInst","_connectTimepicker","_setTimeFromField","_inlineTimepicker","replace","input","append","trigger","hasClass","_attachments","addClass","keydown","_doKeyDown","keyup","_doKeyUp","bind","event","key","value","_get","data","_getInst","handled","_keyEvent","keyCode","_hideTimepicker","_updateSelectedValue","ctrlKey","_showTimepicker","preventDefault","stopPropagation","_updateTimepicker","isRTL","remove","_appendClass","unbind","_adjustZIndex","after","_lastInput","is","divSpan","show","css","_getZIndex","parentNode","_isDisabledTimepicker","stop","lastVal","_pos","_findPos","offsetHeight","isFixed","parents","each","offset","left","top","position","display","of","my","at","collision","_hoursClicked","_minutesClicked","_checkOffset","blockUI","postProcess","borders","_getBorders","find","width","outerWidth","height","outerHeight","duration","effects","focus","elem","maxValue","length","document","parseInt","isNaN","parent","_refreshTimepicker","empty","_generateHTML","_rebindDialogEvents","self","end","fromDoubleClick","proxy","selectMinutes","selectHours","removeClass","className","indexOf","e","selectNow","deselectTime","h","row","col","html","amRows","pmRows","amItems","pmItems","amFirstRow","pmFirstRow","Array","hours_options","hoursPerRow","hourCounter","hourLabel","showButtonPanel","push","Math","ceil","floor","min","max","toString","_generateHTMLHourCell","_generateHTMLMinutes","buttonPanel","_updateMinuteDisplay","newHtml","minutesPerRow","minutes_options","minuteCounter","minuteLabel","m","i","currMin","inArray","sort","a","b","round","displayText","_generateHTMLMinuteCell","displayHour","enabled","_destroyTimepicker","$target","removeData","_enableTimepicker","target_id","attr","disabled","filter","children","map","_disableTimepicker","tpWidth","tpHeight","inputWidth","inputHeight","viewWidth","documentElement","clientWidth","scrollLeft","viewHeight","clientHeight","scrollTop","abs","obj","type","nodeType","convert","thin","medium","thick","parseFloat","_checkExternalClick","_triggerClass","_tidyDialog","hide","_dialogInput","unblockUI","val","timeToParse","_getCurrentTimeRounded","getHours","getMinutes","timeVal","time","parseTime","_optionTimepicker","_setTimeTimepicker","_setTime","_updateAlternate","noChange","origHours","origMinutes","currentTime","currentMinutes","adjustedMinutes","setMinutes","retVal","Object","p","substr","timeValUpper","toUpperCase","$td","currentTarget","newHours","newMinutes","newTime","_getParsedTime","period","selectedHours","selectedMinutes","displayHours","parsedTime","_getTimeAsDateTimepicker","_getTimeTimepicker","_getHourTimepicker","_getMinuteTimepicker","fn","options","initialized","mousedown","otherArgs","slice","call","concat","window","jQuery","opExtendedSettings","wrap","container","toggle","hidden","click","openingHoursData","translations","moreSettings","fewerSettings","ready","on","widget","opHolidays","holidaysWrap","addButton","index","element","opSingleHoliday","post","ajax_object","ajax_url","action","response","newHoliday","clone","removeButton","inputDateStart","inputDateEnd","datepicker","dateFormat","firstDay","startOfWeek","dayNames","weekdays","full","dayNamesMin","short","dayNamesShort","date","blur","opIOs","ioWrap","opSingleIO","newIO","inputDate","inputsTime","tp_hour","tp_minute","dateStart","dateEnd","opPeriodsDay","periodContainer","tbody","weekday","set","newPeriod","opSinglePeriod","btnDeletePeriod","inputs_tp","form","opShortcodeBuilderLink","$element","scBuilderUrl","open"],"mappings":"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","file":"main.js","sourcesContent":["/*\n * jQuery UI Timepicker\n *\n * Copyright 2010-2013, Francois Gelinas\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * http://fgelinas.com/code/timepicker\n *\n * Depends:\n *\tjquery.ui.core.js\n *  jquery.ui.position.js (only if position settings are used)\n *\n * Change version 0.1.0 - moved the t-rex up here\n *\n                                                  ____\n       ___                                      .-~. /_\"-._\n      `-._~-.                                  / /_ \"~o\\  :Y\n          \\  \\                                / : \\~x.  ` ')\n           ]  Y                              /  |  Y< ~-.__j\n          /   !                        _.--~T : l  l<  /.-~\n         /   /                 ____.--~ .   ` l /~\\ \\<|Y\n        /   /             .-~~\"        /| .    ',-~\\ \\L|\n       /   /             /     .^   \\ Y~Y \\.^>/l_   \"--'\n      /   Y           .-\"(  .  l__  j_j l_/ /~_.-~    .\n     Y    l          /    \\  )    ~~~.\" / `/\"~ / \\.__/l_\n     |     \\     _.-\"      ~-{__     l  :  l._Z~-.___.--~\n     |      ~---~           /   ~~\"---\\_  ' __[>\n     l  .                _.^   ___     _>-y~\n      \\  \\     .      .-~   .-~   ~>--\"  /\n       \\  ~---\"            /     ./  _.-'\n        \"-.,_____.,_  _.--~\\     _.-~\n                    ~~     (   _}       -Row\n                           `. ~(\n                             )  \\\n                            /,`--'~\\--'~\\\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                             ->T-Rex<-\n*/\n\n(function ($) {\n\n    $.extend($.ui, { timepicker: { version: \"0.3.3\"} });\n\n    var PROP_NAME = 'timepicker',\n        tpuuid = new Date().getTime();\n\n    /* Time picker manager.\n    Use the singleton instance of this class, $.timepicker, to interact with the time picker.\n    Settings for (groups of) time pickers are maintained in an instance object,\n    allowing multiple different settings on the same page. */\n\n    function Timepicker() {\n        this.debug = true; // Change this to true to start debugging\n        this._curInst = null; // The current instance in use\n        this._disabledInputs = []; // List of time picker inputs that have been disabled\n        this._timepickerShowing = false; // True if the popup picker is showing , false if not\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\n        this._dialogClass = 'ui-timepicker-dialog'; // The name of the dialog marker class\n        this._mainDivId = 'ui-timepicker-div'; // The ID of the main timepicker division\n        this._inlineClass = 'ui-timepicker-inline'; // The name of the inline marker class\n        this._currentClass = 'ui-timepicker-current'; // The name of the current hour / minutes marker class\n        this._dayOverClass = 'ui-timepicker-days-cell-over'; // The name of the day hover marker class\n\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[''] = { // Default regional settings\n            hourText: 'Hour',           // Display text for hours section\n            minuteText: 'Minute',       // Display text for minutes link\n            amPmText: ['AM', 'PM'],     // Display text for AM PM\n            closeButtonText: 'Done',        // Text for the confirmation button (ok button)\n            nowButtonText: 'Now',           // Text for the now button\n            deselectButtonText: 'Deselect'  // Text for the deselect button\n        };\n        this._defaults = { // Global defaults for all the time picker instances\n            showOn: 'focus',    // 'focus' for popup on focus,\n                                // 'button' for trigger button, or 'both' for either (not yet implemented)\n            button: null,                   // 'button' element that will trigger the timepicker\n            showAnim: 'fadeIn',             // Name of jQuery animation for popup\n            showOptions: {},                // Options for enhanced animations\n            appendText: '',                 // Display text following the input box, e.g. showing the format\n\n            beforeShow: null,               // Define a callback function executed before the timepicker is shown\n            onSelect: null,                 // Define a callback function when a hour / minutes is selected\n            onClose: null,                  // Define a callback function when the timepicker is closed\n\n            timeSeparator: ':',             // The character to use to separate hours and minutes.\n            periodSeparator: ' ',           // The character to use to separate the time from the time period.\n            showPeriod: false,              // Define whether or not to show AM/PM with selected time\n            showPeriodLabels: true,         // Show the AM/PM labels on the left of the time picker\n            showLeadingZero: true,          // Define whether or not to show a leading zero for hours < 10. [true/false]\n            showMinutesLeadingZero: true,   // Define whether or not to show a leading zero for minutes < 10.\n            altField: '',                   // Selector for an alternate field to store selected time into\n            defaultTime: 'now',             // Used as default time when input field is empty or for inline timePicker\n                                            // (set to 'now' for the current time, '' for no highlighted time)\n            myPosition: 'left top',         // Position of the dialog relative to the input.\n                                            // see the position utility for more info : http://jqueryui.com/demos/position/\n            atPosition: 'left bottom',      // Position of the input element to match\n                                            // Note : if the position utility is not loaded, the timepicker will attach left top to left bottom\n            //NEW: 2011-02-03\n            onHourShow: null,\t\t\t    // callback for enabling / disabling on selectable hours  ex : function(hour) { return true; }\n            onMinuteShow: null,             // callback for enabling / disabling on time selection  ex : function(hour,minute) { return true; }\n\n            hours: {\n                starts: 0,                  // first displayed hour\n                ends: 23                    // last displayed hour\n            },\n            minutes: {\n                starts: 0,                  // first displayed minute\n                ends: 55,                   // last displayed minute\n                interval: 5,                // interval of displayed minutes\n                manual: []                  // optional extra manual entries for minutes\n            },\n            rows: 4,                        // number of rows for the input tables, minimum 2, makes more sense if you use multiple of 2\n            // 2011-08-05 0.2.4\n            showHours: true,                // display the hours section of the dialog\n            showMinutes: true,              // display the minute section of the dialog\n            optionalMinutes: false,         // optionally parse inputs of whole hours with minutes omitted\n\n            // buttons\n            showCloseButton: false,         // shows an OK button to confirm the edit\n            showNowButton: false,           // Shows the 'now' button\n            showDeselectButton: false,       // Shows the deselect time button\n            \n            maxTime: {\n                hour: null,\n                minute: null\n            },\n            minTime: {\n                hour: null,\n                minute: null\n            }\n\t\t\t\n        };\n        $.extend(this._defaults, this.regional['']);\n\n        this.tpDiv = $('<div id=\"' + this._mainDivId + '\" class=\"ui-timepicker ui-widget ui-helper-clearfix ui-corner-all \" style=\"display: none\"></div>');\n    }\n\n    $.extend(Timepicker.prototype, {\n        /* Class name added to elements to indicate already configured with a time picker. */\n        markerClassName: 'hasTimepicker',\n\n        /* Debug logging (if enabled). */\n        log: function () {\n            if (this.debug)\n                console.log.apply('', arguments);\n        },\n\n        _widgetTimepicker: function () {\n            return this.tpDiv;\n        },\n\n        /* Override the default settings for all instances of the time picker.\n        @param  settings  object - the new settings to use as defaults (anonymous object)\n        @return the manager object */\n        setDefaults: function (settings) {\n            extendRemove(this._defaults, settings || {});\n            return this;\n        },\n\n        /* Attach the time picker to a jQuery selection.\n        @param  target    element - the target input field or division or span\n        @param  settings  object - the new settings to use for this time picker instance (anonymous) */\n        _attachTimepicker: function (target, settings) {\n            // check for settings on the control itself - in namespace 'time:'\n            var inlineSettings = null;\n            for (var attrName in this._defaults) {\n                var attrValue = target.getAttribute('time:' + attrName);\n                if (attrValue) {\n                    inlineSettings = inlineSettings || {};\n                    try {\n                        inlineSettings[attrName] = eval(attrValue);\n                    } catch (err) {\n                        inlineSettings[attrName] = attrValue;\n                    }\n                }\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            var inline = (nodeName == 'div' || nodeName == 'span');\n\n            if (!target.id) {\n                this.uuid += 1;\n                target.id = 'tp' + this.uuid;\n            }\n            var inst = this._newInst($(target), inline);\n            inst.settings = $.extend({}, settings || {}, inlineSettings || {});\n            if (nodeName == 'input') {\n                this._connectTimepicker(target, inst);\n                // init inst.hours and inst.minutes from the input value\n                this._setTimeFromField(inst);\n            } else if (inline) {\n                this._inlineTimepicker(target, inst);\n            }\n\n\n        },\n\n        /* Create a new instance object. */\n        _newInst: function (target, inline) {\n            var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\\\\\$1'); // escape jQuery meta chars\n            return {\n                id: id, input: target, // associated target\n                inline: inline, // is timepicker inline or not :\n                tpDiv: (!inline ? this.tpDiv : // presentation div\n                    $('<div class=\"' + this._inlineClass + ' ui-timepicker ui-widget  ui-helper-clearfix\"></div>'))\n            };\n        },\n\n        /* Attach the time picker to an input field. */\n        _connectTimepicker: function (target, inst) {\n            var input = $(target);\n            inst.append = $([]);\n            inst.trigger = $([]);\n            if (input.hasClass(this.markerClassName)) { return; }\n            this._attachments(input, inst);\n            input.addClass(this.markerClassName).\n                keydown(this._doKeyDown).\n                keyup(this._doKeyUp).\n                bind(\"setData.timepicker\", function (event, key, value) {\n                    inst.settings[key] = value;\n                }).\n                bind(\"getData.timepicker\", function (event, key) {\n                    return this._get(inst, key);\n                });\n            $.data(target, PROP_NAME, inst);\n        },\n\n        /* Handle keystrokes. */\n        _doKeyDown: function (event) {\n            var inst = $.timepicker._getInst(event.target);\n            var handled = true;\n            inst._keyEvent = true;\n            if ($.timepicker._timepickerShowing) {\n                switch (event.keyCode) {\n                    case 9: $.timepicker._hideTimepicker();\n                        handled = false;\n                        break; // hide on tab out\n                    case 13:\n                        $.timepicker._updateSelectedValue(inst);\n                        $.timepicker._hideTimepicker();\n\n\t\t\t\t\t\treturn false; // don't submit the form\n\t\t\t\t\t\tbreak; // select the value on enter\n                    case 27: $.timepicker._hideTimepicker();\n                        break; // hide on escape\n                    default: handled = false;\n                }\n            }\n            else if (event.keyCode == 36 && event.ctrlKey) { // display the time picker on ctrl+home\n                $.timepicker._showTimepicker(this);\n            }\n            else {\n                handled = false;\n            }\n            if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        },\n\n        /* Update selected time on keyUp */\n        /* Added verion 0.0.5 */\n        _doKeyUp: function (event) {\n            var inst = $.timepicker._getInst(event.target);\n            $.timepicker._setTimeFromField(inst);\n            $.timepicker._updateTimepicker(inst);\n        },\n\n        /* Make attachments based on settings. */\n        _attachments: function (input, inst) {\n            var appendText = this._get(inst, 'appendText');\n            var isRTL = this._get(inst, 'isRTL');\n            if (inst.append) { inst.append.remove(); }\n            if (appendText) {\n                inst.append = $('<span class=\"' + this._appendClass + '\">' + appendText + '</span>');\n                input[isRTL ? 'before' : 'after'](inst.append);\n            }\n            input.unbind('focus.timepicker', this._showTimepicker);\n            input.unbind('click.timepicker', this._adjustZIndex);\n\n            if (inst.trigger) { inst.trigger.remove(); }\n\n            var showOn = this._get(inst, 'showOn');\n            if (showOn == 'focus' || showOn == 'both') { // pop-up time picker when in the marked field\n                input.bind(\"focus.timepicker\", this._showTimepicker);\n                input.bind(\"click.timepicker\", this._adjustZIndex);\n            }\n            if (showOn == 'button' || showOn == 'both') { // pop-up time picker when 'button' element is clicked\n                var button = this._get(inst, 'button');\n\n                // Add button if button element is not set\n                if(button == null) {\n                    button = $('<button class=\"ui-timepicker-trigger\" type=\"button\">...</button>');\n                    input.after(button);\n                }\n\n                $(button).bind(\"click.timepicker\", function () {\n                    if ($.timepicker._timepickerShowing && $.timepicker._lastInput == input[0]) {\n                        $.timepicker._hideTimepicker();\n                    } else if (!inst.input.is(':disabled')) {\n                        $.timepicker._showTimepicker(input[0]);\n                    }\n                    return false;\n                });\n\n            }\n        },\n\n\n        /* Attach an inline time picker to a div. */\n        _inlineTimepicker: function(target, inst) {\n            var divSpan = $(target);\n            if (divSpan.hasClass(this.markerClassName))\n                return;\n            divSpan.addClass(this.markerClassName).append(inst.tpDiv).\n                bind(\"setData.timepicker\", function(event, key, value){\n                    inst.settings[key] = value;\n                }).bind(\"getData.timepicker\", function(event, key){\n                    return this._get(inst, key);\n                });\n            $.data(target, PROP_NAME, inst);\n\n            this._setTimeFromField(inst);\n            this._updateTimepicker(inst);\n            inst.tpDiv.show();\n        },\n\n        _adjustZIndex: function(input) {\n            input = input.target || input;\n            var inst = $.timepicker._getInst(input);\n            inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\n        },\n\n        /* Pop-up the time picker for a given input field.\n        @param  input  element - the input field attached to the time picker or\n        event - if triggered by focus */\n        _showTimepicker: function (input) {\n            input = input.target || input;\n            if (input.nodeName.toLowerCase() != 'input') { input = $('input', input.parentNode)[0]; } // find from button/image trigger\n\n            if ($.timepicker._isDisabledTimepicker(input) || $.timepicker._lastInput == input) { return; } // already here\n\n            // fix v 0.0.8 - close current timepicker before showing another one\n            $.timepicker._hideTimepicker();\n\n            var inst = $.timepicker._getInst(input);\n            if ($.timepicker._curInst && $.timepicker._curInst != inst) {\n                $.timepicker._curInst.tpDiv.stop(true, true);\n            }\n            var beforeShow = $.timepicker._get(inst, 'beforeShow');\n            extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));\n            inst.lastVal = null;\n            $.timepicker._lastInput = input;\n\n            $.timepicker._setTimeFromField(inst);\n\n            // calculate default position\n            if ($.timepicker._inDialog) { input.value = ''; } // hide cursor\n            if (!$.timepicker._pos) { // position below input\n                $.timepicker._pos = $.timepicker._findPos(input);\n                $.timepicker._pos[1] += input.offsetHeight; // add the height\n            }\n            var isFixed = false;\n            $(input).parents().each(function () {\n                isFixed |= $(this).css('position') == 'fixed';\n                return !isFixed;\n            });\n\n            var offset = { left: $.timepicker._pos[0], top: $.timepicker._pos[1] };\n\n            $.timepicker._pos = null;\n            // determine sizing offscreen\n            inst.tpDiv.css({ position: 'absolute', display: 'block', top: '-1000px' });\n            $.timepicker._updateTimepicker(inst);\n\n\n            // position with the ui position utility, if loaded\n            if ( ( ! inst.inline )  && ( typeof $.ui.position == 'object' ) ) {\n                inst.tpDiv.position({\n                    of: inst.input,\n                    my: $.timepicker._get( inst, 'myPosition' ),\n                    at: $.timepicker._get( inst, 'atPosition' ),\n                    // offset: $( \"#offset\" ).val(),\n                    // using: using,\n                    collision: 'flip'\n                });\n                var offset = inst.tpDiv.offset();\n                $.timepicker._pos = [offset.top, offset.left];\n            }\n\n\n            // reset clicked state\n            inst._hoursClicked = false;\n            inst._minutesClicked = false;\n\n            // fix width for dynamic number of time pickers\n            // and adjust position before showing\n            offset = $.timepicker._checkOffset(inst, offset, isFixed);\n            inst.tpDiv.css({ position: ($.timepicker._inDialog && $.blockUI ?\n\t\t\t    'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',\n                left: offset.left + 'px', top: offset.top + 'px'\n            });\n            if ( ! inst.inline ) {\n                var showAnim = $.timepicker._get(inst, 'showAnim');\n                var duration = $.timepicker._get(inst, 'duration');\n\n                var postProcess = function () {\n                    $.timepicker._timepickerShowing = true;\n                    var borders = $.timepicker._getBorders(inst.tpDiv);\n                    inst.tpDiv.find('iframe.ui-timepicker-cover'). // IE6- only\n\t\t\t\t\tcss({ left: -borders[0], top: -borders[1],\n\t\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\n\t\t\t\t\t});\n                };\n\n                // Fixed the zIndex problem for real (I hope) - FG - v 0.2.9\n                $.timepicker._adjustZIndex(input);\n                //inst.tpDiv.css('zIndex', $.timepicker._getZIndex(input) +1);\n\n                if ($.effects && $.effects[showAnim]) {\n                    inst.tpDiv.show(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\n                }\n                else {\n                    inst.tpDiv.show((showAnim ? duration : null), postProcess);\n                }\n                if (!showAnim || !duration) { postProcess(); }\n                if (inst.input.is(':visible') && !inst.input.is(':disabled')) { inst.input.focus(); }\n                $.timepicker._curInst = inst;\n            }\n        },\n\n        // This is an enhanced copy of the zIndex function of UI core 1.8.?? For backward compatibility.\n        // Enhancement returns maximum zindex value discovered while traversing parent elements,\n        // rather than the first zindex value found. Ensures the timepicker popup will be in front,\n        // even in funky scenarios like non-jq dialog containers with large fixed zindex values and\n        // nested zindex-influenced elements of their own.\n        _getZIndex: function (target) {\n            var elem = $(target);\n            var maxValue = 0;\n            var position, value;\n            while (elem.length && elem[0] !== document) {\n                position = elem.css(\"position\");\n                if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n                    value = parseInt(elem.css(\"zIndex\"), 10);\n                    if (!isNaN(value) && value !== 0) {\n                        if (value > maxValue) { maxValue = value; }\n                    }\n                }\n                elem = elem.parent();\n            }\n\n            return maxValue;\n        },\n\n        /* Refresh the time picker\n           @param   target  element - The target input field or inline container element. */\n        _refreshTimepicker: function(target) {\n            var inst = this._getInst(target);\n            if (inst) {\n                this._updateTimepicker(inst);\n            }\n        },\n\n\n        /* Generate the time picker content. */\n        _updateTimepicker: function (inst) {\n            inst.tpDiv.empty().append(this._generateHTML(inst));\n            this._rebindDialogEvents(inst);\n\n        },\n\n        _rebindDialogEvents: function (inst) {\n            var borders = $.timepicker._getBorders(inst.tpDiv),\n                self = this;\n            inst.tpDiv\n\t\t\t.find('iframe.ui-timepicker-cover') // IE6- only\n\t\t\t\t.css({ left: -borders[0], top: -borders[1],\n\t\t\t\t    width: inst.tpDiv.outerWidth(), height: inst.tpDiv.outerHeight()\n\t\t\t\t})\n\t\t\t.end()\n            // after the picker html is appended bind the click & double click events (faster in IE this way\n            // then letting the browser interpret the inline events)\n            // the binding for the minute cells also exists in _updateMinuteDisplay\n            .find('.ui-timepicker-minute-cell')\n                .unbind()\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this))\n            .end()\n            .find('.ui-timepicker-hour-cell')\n                .unbind()\n                .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectHours, this))\n                .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectHours, this))\n            .end()\n\t\t\t.find('.ui-timepicker td a')\n                .unbind()\n\t\t\t\t.bind('mouseout', function () {\n\t\t\t\t    $(this).removeClass('ui-state-hover');\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).removeClass('ui-timepicker-prev-hover');\n\t\t\t\t    if (this.className.indexOf('ui-timepicker-next') != -1) $(this).removeClass('ui-timepicker-next-hover');\n\t\t\t\t})\n\t\t\t\t.bind('mouseover', function () {\n\t\t\t\t    if ( ! self._isDisabledTimepicker(inst.inline ? inst.tpDiv.parent()[0] : inst.input[0])) {\n\t\t\t\t        $(this).parents('.ui-timepicker-calendar').find('a').removeClass('ui-state-hover');\n\t\t\t\t        $(this).addClass('ui-state-hover');\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-prev') != -1) $(this).addClass('ui-timepicker-prev-hover');\n\t\t\t\t        if (this.className.indexOf('ui-timepicker-next') != -1) $(this).addClass('ui-timepicker-next-hover');\n\t\t\t\t    }\n\t\t\t\t})\n\t\t\t.end()\n\t\t\t.find('.' + this._dayOverClass + ' a')\n\t\t\t\t.trigger('mouseover')\n\t\t\t.end()\n            .find('.ui-timepicker-now').bind(\"click\", function(e) {\n                    $.timepicker.selectNow(e);\n            }).end()\n            .find('.ui-timepicker-deselect').bind(\"click\",function(e) {\n                    $.timepicker.deselectTime(e);\n            }).end()\n            .find('.ui-timepicker-close').bind(\"click\",function(e) {\n                    $.timepicker._hideTimepicker();\n            }).end();\n        },\n\n        /* Generate the HTML for the current state of the time picker. */\n        _generateHTML: function (inst) {\n\n            var h, m, row, col, html, hoursHtml, minutesHtml = '',\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                showPeriodLabels = (this._get(inst, 'showPeriodLabels') == true),\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\n                showHours = (this._get(inst, 'showHours') == true),\n                showMinutes = (this._get(inst, 'showMinutes') == true),\n                amPmText = this._get(inst, 'amPmText'),\n                rows = this._get(inst, 'rows'),\n                amRows = 0,\n                pmRows = 0,\n                amItems = 0,\n                pmItems = 0,\n                amFirstRow = 0,\n                pmFirstRow = 0,\n                hours = Array(),\n                hours_options = this._get(inst, 'hours'),\n                hoursPerRow = null,\n                hourCounter = 0,\n                hourLabel = this._get(inst, 'hourText'),\n                showCloseButton = this._get(inst, 'showCloseButton'),\n                closeButtonText = this._get(inst, 'closeButtonText'),\n                showNowButton = this._get(inst, 'showNowButton'),\n                nowButtonText = this._get(inst, 'nowButtonText'),\n                showDeselectButton = this._get(inst, 'showDeselectButton'),\n                deselectButtonText = this._get(inst, 'deselectButtonText'),\n                showButtonPanel = showCloseButton || showNowButton || showDeselectButton;\n\n\n\n            // prepare all hours and minutes, makes it easier to distribute by rows\n            for (h = hours_options.starts; h <= hours_options.ends; h++) {\n                hours.push (h);\n            }\n            hoursPerRow = Math.ceil(hours.length / rows); // always round up\n\n            if (showPeriodLabels) {\n                for (hourCounter = 0; hourCounter < hours.length; hourCounter++) {\n                    if (hours[hourCounter] < 12) {\n                        amItems++;\n                    }\n                    else {\n                        pmItems++;\n                    }\n                }\n                hourCounter = 0;\n\n                amRows = Math.floor(amItems / hours.length * rows);\n                pmRows = Math.floor(pmItems / hours.length * rows);\n\n                // assign the extra row to the period that is more densely populated\n                if (rows != amRows + pmRows) {\n                    // Make sure: AM Has Items and either PM Does Not, AM has no rows yet, or AM is more dense\n                    if (amItems && (!pmItems || !amRows || (pmRows && amItems / amRows >= pmItems / pmRows))) {\n                        amRows++;\n                    } else {\n                        pmRows++;\n                    }\n                }\n                amFirstRow = Math.min(amRows, 1);\n                pmFirstRow = amRows + 1;\n\n                if (amRows == 0) {\n                    hoursPerRow = Math.ceil(pmItems / pmRows);\n                } else if (pmRows == 0) {\n                    hoursPerRow = Math.ceil(amItems / amRows);\n                } else {\n                    hoursPerRow = Math.ceil(Math.max(amItems / amRows, pmItems / pmRows));\n                }\n            }\n\n\n            html = '<table class=\"ui-timepicker-table ui-widget-content ui-corner-all\"><tr>';\n\n            if (showHours) {\n\n                html += '<td class=\"ui-timepicker-hours\">' +\n                        '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\n                        hourLabel +\n                        '</div>' +\n                        '<table class=\"ui-timepicker\">';\n\n                for (row = 1; row <= rows; row++) {\n                    html += '<tr>';\n                    // AM\n                    if (row == amFirstRow && showPeriodLabels) {\n                        html += '<th rowspan=\"' + amRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[0] + '</th>';\n                    }\n                    // PM\n                    if (row == pmFirstRow && showPeriodLabels) {\n                        html += '<th rowspan=\"' + pmRows.toString() + '\" class=\"periods\" scope=\"row\">' + amPmText[1] + '</th>';\n                    }\n                    for (col = 1; col <= hoursPerRow; col++) {\n                        if (showPeriodLabels && row < pmFirstRow && hours[hourCounter] >= 12) {\n                            html += this._generateHTMLHourCell(inst, undefined, showPeriod, showLeadingZero);\n                        } else {\n                            html += this._generateHTMLHourCell(inst, hours[hourCounter], showPeriod, showLeadingZero);\n                            hourCounter++;\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</table>' + // Close the hours cells table\n                        '</td>'; // Close the Hour td\n            }\n\n            if (showMinutes) {\n                html += '<td class=\"ui-timepicker-minutes\">';\n                html += this._generateHTMLMinutes(inst);\n                html += '</td>';\n            }\n\n            html += '</tr>';\n\n\n            if (showButtonPanel) {\n                var buttonPanel = '<tr><td colspan=\"3\"><div class=\"ui-timepicker-buttonpane ui-widget-content\">';\n                if (showNowButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-now ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + nowButtonText + '</button>';\n                }\n                if (showDeselectButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-deselect ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + deselectButtonText + '</button>';\n                }\n                if (showCloseButton) {\n                    buttonPanel += '<button type=\"button\" class=\"ui-timepicker-close ui-state-default ui-corner-all\" '\n                                   + ' data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" >'\n                                   + closeButtonText + '</button>';\n                }\n\n                html += buttonPanel + '</div></td></tr>';\n            }\n            html += '</table>';\n\n            return html;\n        },\n\n        /* Special function that update the minutes selection in currently visible timepicker\n         * called on hour selection when onMinuteShow is defined  */\n        _updateMinuteDisplay: function (inst) {\n            var newHtml = this._generateHTMLMinutes(inst);\n            inst.tpDiv.find('td.ui-timepicker-minutes').html(newHtml);\n            this._rebindDialogEvents(inst);\n                // after the picker html is appended bind the click & double click events (faster in IE this way\n                // then letting the browser interpret the inline events)\n                // yes I know, duplicate code, sorry\n/*                .find('.ui-timepicker-minute-cell')\n                    .bind(\"click\", { fromDoubleClick:false }, $.proxy($.timepicker.selectMinutes, this))\n                    .bind(\"dblclick\", { fromDoubleClick:true }, $.proxy($.timepicker.selectMinutes, this));\n*/\n\n        },\n\n        /*\n         * Generate the minutes table\n         * This is separated from the _generateHTML function because is can be called separately (when hours changes)\n         */\n        _generateHTMLMinutes: function (inst) {\n\n            var m, row, html = '',\n                rows = this._get(inst, 'rows'),\n                minutes = Array(),\n                minutes_options = this._get(inst, 'minutes'),\n                minutesPerRow = null,\n                minuteCounter = 0,\n                showMinutesLeadingZero = (this._get(inst, 'showMinutesLeadingZero') == true),\n                onMinuteShow = this._get(inst, 'onMinuteShow'),\n                minuteLabel = this._get(inst, 'minuteText');\n\n            if ( ! minutes_options.starts) {\n                minutes_options.starts = 0;\n            }\n            if ( ! minutes_options.ends) {\n                minutes_options.ends = 59;\n            }\n            if ( ! minutes_options.manual) {\n                minutes_options.manual = [];\n            }\n            for (m = minutes_options.starts; m <= minutes_options.ends; m += minutes_options.interval) {\n                minutes.push(m);\n            }\n            for (i = 0; i < minutes_options.manual.length;i++) {\n                var currMin = minutes_options.manual[i];\n\n                // Validate & filter duplicates of manual minute input\n                if (typeof currMin != 'number' || currMin < 0 || currMin > 59 || $.inArray(currMin, minutes) >= 0) {\n                    continue;\n                }\n                minutes.push(currMin);\n            }\n\n            // Sort to get correct order after adding manual minutes\n            // Use compare function to sort by number, instead of string (default)\n            minutes.sort(function(a, b) {\n                return a-b;\n            });\n\n            minutesPerRow = Math.round(minutes.length / rows + 0.49); // always round up\n\n            /*\n             * The minutes table\n             */\n            // if currently selected minute is not enabled, we have a problem and need to select a new minute.\n            if (onMinuteShow &&\n                (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours , inst.minutes]) == false) ) {\n                // loop minutes and select first available\n                for (minuteCounter = 0; minuteCounter < minutes.length; minuteCounter += 1) {\n                    m = minutes[minuteCounter];\n                    if (onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours, m])) {\n                        inst.minutes = m;\n                        break;\n                    }\n                }\n            }\n\n\n\n            html += '<div class=\"ui-timepicker-title ui-widget-header ui-helper-clearfix ui-corner-all\">' +\n                    minuteLabel +\n                    '</div>' +\n                    '<table class=\"ui-timepicker\">';\n\n            minuteCounter = 0;\n            for (row = 1; row <= rows; row++) {\n                html += '<tr>';\n                while (minuteCounter < row * minutesPerRow) {\n                    var m = minutes[minuteCounter];\n                    var displayText = '';\n                    if (m !== undefined ) {\n                        displayText = (m < 10) && showMinutesLeadingZero ? \"0\" + m.toString() : m.toString();\n                    }\n                    html += this._generateHTMLMinuteCell(inst, m, displayText);\n                    minuteCounter++;\n                }\n                html += '</tr>';\n            }\n\n            html += '</table>';\n\n            return html;\n        },\n\n        /* Generate the content of a \"Hour\" cell */\n        _generateHTMLHourCell: function (inst, hour, showPeriod, showLeadingZero) {\n\n            var displayHour = hour;\n            if ((hour > 12) && showPeriod) {\n                displayHour = hour - 12;\n            }\n            if ((displayHour == 0) && showPeriod) {\n                displayHour = 12;\n            }\n            if ((displayHour < 10) && showLeadingZero) {\n                displayHour = '0' + displayHour;\n            }\n\n            var html = \"\";\n            var enabled = true;\n            var onHourShow = this._get(inst, 'onHourShow');\t\t//custom callback\n            var maxTime = this._get(inst, 'maxTime');\n            var minTime = this._get(inst, 'minTime');\n\n            if (hour == undefined) {\n                html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\n                return html;\n            }\n\n            if (onHourShow) {\n            \tenabled = onHourShow.apply((inst.input ? inst.input[0] : null), [hour]);\n            }\n\t\t\t\n            if (enabled) {\n                if ( !isNaN(parseInt(maxTime.hour)) && hour > maxTime.hour ) enabled = false;\n                if ( !isNaN(parseInt(minTime.hour)) && hour < minTime.hour ) enabled = false;\n            }\n\t\t\t\n            if (enabled) {\n                html = '<td class=\"ui-timepicker-hour-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-hour=\"' + hour.toString() + '\">' +\n                   '<a class=\"ui-state-default ' +\n                   (hour == inst.hours ? 'ui-state-active' : '') +\n                   '\">' +\n                   displayHour.toString() +\n                   '</a></td>';\n            }\n            else {\n            \thtml =\n            \t\t'<td>' +\n\t\t                '<span class=\"ui-state-default ui-state-disabled ' +\n\t\t                (hour == inst.hours ? ' ui-state-active ' : ' ') +\n\t\t                '\">' +\n\t\t                displayHour.toString() +\n\t\t                '</span>' +\n\t\t            '</td>';\n            }\n            return html;\n        },\n\n        /* Generate the content of a \"Hour\" cell */\n        _generateHTMLMinuteCell: function (inst, minute, displayText) {\n             var html = \"\";\n             var enabled = true;\n             var hour = inst.hours;\n             var onMinuteShow = this._get(inst, 'onMinuteShow');\t\t//custom callback\n             var maxTime = this._get(inst, 'maxTime');\n             var minTime = this._get(inst, 'minTime');\n\n             if (onMinuteShow) {\n            \t //NEW: 2011-02-03  we should give the hour as a parameter as well!\n             \tenabled = onMinuteShow.apply((inst.input ? inst.input[0] : null), [inst.hours,minute]);\t\t//trigger callback\n             }\n\n             if (minute == undefined) {\n                 html = '<td><span class=\"ui-state-default ui-state-disabled\">&nbsp;</span></td>';\n                 return html;\n             }\n\n            if (enabled && hour !== null) {\n                if ( !isNaN(parseInt(maxTime.hour)) && !isNaN(parseInt(maxTime.minute)) && hour >= maxTime.hour && minute > maxTime.minute ) enabled = false;\n                if ( !isNaN(parseInt(minTime.hour)) && !isNaN(parseInt(minTime.minute)) && hour <= minTime.hour && minute < minTime.minute ) enabled = false;\n            }\n\t\t\t\n             if (enabled) {\n\t             html = '<td class=\"ui-timepicker-minute-cell\" data-timepicker-instance-id=\"#' + inst.id.replace(/\\\\\\\\/g,\"\\\\\") + '\" data-minute=\"' + minute.toString() + '\" >' +\n\t                   '<a class=\"ui-state-default ' +\n\t                   (minute == inst.minutes ? 'ui-state-active' : '') +\n\t                   '\" >' +\n\t                   displayText +\n\t                   '</a></td>';\n             }\n             else {\n\n            \thtml = '<td>' +\n\t                 '<span class=\"ui-state-default ui-state-disabled\" >' +\n\t                 \tdisplayText +\n\t                 '</span>' +\n                 '</td>';\n             }\n             return html;\n        },\n\n\n        /* Detach a timepicker from its control.\n           @param  target    element - the target input field or division or span */\n        _destroyTimepicker: function(target) {\n            var $target = $(target);\n            var inst = $.data(target, PROP_NAME);\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            $.removeData(target, PROP_NAME);\n            if (nodeName == 'input') {\n                inst.append.remove();\n                inst.trigger.remove();\n                $target.removeClass(this.markerClassName)\n                    .unbind('focus.timepicker', this._showTimepicker)\n                    .unbind('click.timepicker', this._adjustZIndex);\n            } else if (nodeName == 'div' || nodeName == 'span')\n                $target.removeClass(this.markerClassName).empty();\n        },\n\n        /* Enable the date picker to a jQuery selection.\n           @param  target    element - the target input field or division or span */\n        _enableTimepicker: function(target) {\n            var $target = $(target),\n                target_id = $target.attr('id'),\n                inst = $.data(target, PROP_NAME);\n\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            if (nodeName == 'input') {\n                target.disabled = false;\n                var button = this._get(inst, 'button');\n                $(button).removeClass('ui-state-disabled').disabled = false;\n                inst.trigger.filter('button').\n                    each(function() { this.disabled = false; }).end();\n            }\n            else if (nodeName == 'div' || nodeName == 'span') {\n                var inline = $target.children('.' + this._inlineClass);\n                inline.children().removeClass('ui-state-disabled');\n                inline.find('button').each(\n                    function() { this.disabled = false }\n                )\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function(value) { return (value == target_id ? null : value); }); // delete entry\n        },\n\n        /* Disable the time picker to a jQuery selection.\n           @param  target    element - the target input field or division or span */\n        _disableTimepicker: function(target) {\n            var $target = $(target);\n            var inst = $.data(target, PROP_NAME);\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n            var nodeName = target.nodeName.toLowerCase();\n            if (nodeName == 'input') {\n                var button = this._get(inst, 'button');\n\n                $(button).addClass('ui-state-disabled').disabled = true;\n                target.disabled = true;\n\n                inst.trigger.filter('button').\n                    each(function() { this.disabled = true; }).end();\n\n            }\n            else if (nodeName == 'div' || nodeName == 'span') {\n                var inline = $target.children('.' + this._inlineClass);\n                inline.children().addClass('ui-state-disabled');\n                inline.find('button').each(\n                    function() { this.disabled = true }\n                )\n\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function(value) { return (value == target ? null : value); }); // delete entry\n            this._disabledInputs[this._disabledInputs.length] = $target.attr('id');\n        },\n\n        /* Is the first field in a jQuery collection disabled as a timepicker?\n        @param  target_id element - the target input field or division or span\n        @return boolean - true if disabled, false if enabled */\n        _isDisabledTimepicker: function (target_id) {\n            if ( ! target_id) { return false; }\n            for (var i = 0; i < this._disabledInputs.length; i++) {\n                if (this._disabledInputs[i] == target_id) { return true; }\n            }\n            return false;\n        },\n\n        /* Check positioning to remain on screen. */\n        _checkOffset: function (inst, offset, isFixed) {\n            var tpWidth = inst.tpDiv.outerWidth();\n            var tpHeight = inst.tpDiv.outerHeight();\n            var inputWidth = inst.input ? inst.input.outerWidth() : 0;\n            var inputHeight = inst.input ? inst.input.outerHeight() : 0;\n            var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();\n            var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();\n\n            offset.left -= (this._get(inst, 'isRTL') ? (tpWidth - inputWidth) : 0);\n            offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;\n            offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;\n\n            // now check if timepicker is showing outside window viewport - move to a better place if so.\n            offset.left -= Math.min(offset.left, (offset.left + tpWidth > viewWidth && viewWidth > tpWidth) ?\n\t\t\tMath.abs(offset.left + tpWidth - viewWidth) : 0);\n            offset.top -= Math.min(offset.top, (offset.top + tpHeight > viewHeight && viewHeight > tpHeight) ?\n\t\t\tMath.abs(tpHeight + inputHeight) : 0);\n\n            return offset;\n        },\n\n        /* Find an object's position on the screen. */\n        _findPos: function (obj) {\n            var inst = this._getInst(obj);\n            var isRTL = this._get(inst, 'isRTL');\n            while (obj && (obj.type == 'hidden' || obj.nodeType != 1)) {\n                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];\n            }\n            var position = $(obj).offset();\n            return [position.left, position.top];\n        },\n\n        /* Retrieve the size of left and top borders for an element.\n        @param  elem  (jQuery object) the element of interest\n        @return  (number[2]) the left and top borders */\n        _getBorders: function (elem) {\n            var convert = function (value) {\n                return { thin: 1, medium: 2, thick: 3}[value] || value;\n            };\n            return [parseFloat(convert(elem.css('border-left-width'))),\n\t\t\tparseFloat(convert(elem.css('border-top-width')))];\n        },\n\n\n        /* Close time picker if clicked elsewhere. */\n        _checkExternalClick: function (event) {\n            if (!$.timepicker._curInst) { return; }\n            var $target = $(event.target);\n            if ($target[0].id != $.timepicker._mainDivId &&\n\t\t\t\t$target.parents('#' + $.timepicker._mainDivId).length == 0 &&\n\t\t\t\t!$target.hasClass($.timepicker.markerClassName) &&\n\t\t\t\t!$target.hasClass($.timepicker._triggerClass) &&\n\t\t\t\t$.timepicker._timepickerShowing && !($.timepicker._inDialog && $.blockUI))\n                $.timepicker._hideTimepicker();\n        },\n\n        /* Hide the time picker from view.\n        @param  input  element - the input field attached to the time picker */\n        _hideTimepicker: function (input) {\n            var inst = this._curInst;\n            if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\n            if (this._timepickerShowing) {\n                var showAnim = this._get(inst, 'showAnim');\n                var duration = this._get(inst, 'duration');\n                var postProcess = function () {\n                    $.timepicker._tidyDialog(inst);\n                    this._curInst = null;\n                };\n                if ($.effects && $.effects[showAnim]) {\n                    inst.tpDiv.hide(showAnim, $.timepicker._get(inst, 'showOptions'), duration, postProcess);\n                }\n                else {\n                    inst.tpDiv[(showAnim == 'slideDown' ? 'slideUp' :\n\t\t\t\t\t    (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);\n                }\n                if (!showAnim) { postProcess(); }\n\n                this._timepickerShowing = false;\n\n                this._lastInput = null;\n                if (this._inDialog) {\n                    this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });\n                    if ($.blockUI) {\n                        $.unblockUI();\n                        $('body').append(this.tpDiv);\n                    }\n                }\n                this._inDialog = false;\n\n                var onClose = this._get(inst, 'onClose');\n                 if (onClose) {\n                     onClose.apply(\n                         (inst.input ? inst.input[0] : null),\n \t\t\t\t\t    [(inst.input ? inst.input.val() : ''), inst]);  // trigger custom callback\n                 }\n\n            }\n        },\n\n\n\n        /* Tidy up after a dialog display. */\n        _tidyDialog: function (inst) {\n            inst.tpDiv.removeClass(this._dialogClass).unbind('.ui-timepicker');\n        },\n\n        /* Retrieve the instance data for the target control.\n        @param  target  element - the target input field or division or span\n        @return  object - the associated instance data\n        @throws  error if a jQuery problem getting data */\n        _getInst: function (target) {\n            try {\n                return $.data(target, PROP_NAME);\n            }\n            catch (err) {\n                throw 'Missing instance data for this timepicker';\n            }\n        },\n\n        /* Get a setting value, defaulting if necessary. */\n        _get: function (inst, name) {\n            return inst.settings[name] !== undefined ?\n\t\t\tinst.settings[name] : this._defaults[name];\n        },\n\n        /* Parse existing time and initialise time picker. */\n        _setTimeFromField: function (inst) {\n            if (inst.input.val() == inst.lastVal) { return; }\n            var defaultTime = this._get(inst, 'defaultTime');\n\n            var timeToParse = defaultTime == 'now' ? this._getCurrentTimeRounded(inst) : defaultTime;\n            if ((inst.inline == false) && (inst.input.val() != '')) { timeToParse = inst.input.val() }\n\n            if (timeToParse instanceof Date) {\n                inst.hours = timeToParse.getHours();\n                inst.minutes = timeToParse.getMinutes();\n            } else {\n                var timeVal = inst.lastVal = timeToParse;\n                if (timeToParse == '') {\n                    inst.hours = -1;\n                    inst.minutes = -1;\n                } else {\n                    var time = this.parseTime(inst, timeVal);\n                    inst.hours = time.hours;\n                    inst.minutes = time.minutes;\n                }\n            }\n\n\n            $.timepicker._updateTimepicker(inst);\n        },\n\n        /* Update or retrieve the settings for an existing time picker.\n           @param  target  element - the target input field or division or span\n           @param  name    object - the new settings to update or\n                           string - the name of the setting to change or retrieve,\n                           when retrieving also 'all' for all instance settings or\n                           'defaults' for all global defaults\n           @param  value   any - the new value for the setting\n                       (omit if above is an object or to retrieve a value) */\n        _optionTimepicker: function(target, name, value) {\n            var inst = this._getInst(target);\n            if (arguments.length == 2 && typeof name == 'string') {\n                return (name == 'defaults' ? $.extend({}, $.timepicker._defaults) :\n                    (inst ? (name == 'all' ? $.extend({}, inst.settings) :\n                    this._get(inst, name)) : null));\n            }\n            var settings = name || {};\n            if (typeof name == 'string') {\n                settings = {};\n                settings[name] = value;\n            }\n            if (inst) {\n                extendRemove(inst.settings, settings);\n                if (this._curInst == inst) {\n                    this._hideTimepicker();\n                \tthis._updateTimepicker(inst);\n                }\n                if (inst.inline) {\n                    this._updateTimepicker(inst);\n                }\n            }\n        },\n\n\n        /* Set the time for a jQuery selection.\n\t    @param  target  element - the target input field or division or span\n\t    @param  time    String - the new time */\n\t    _setTimeTimepicker: function(target, time) {\n\t\t    var inst = this._getInst(target);\n\t\t    if (inst) {\n\t\t\t    this._setTime(inst, time);\n    \t\t\tthis._updateTimepicker(inst);\n\t    \t\tthis._updateAlternate(inst, time);\n\t\t    }\n\t    },\n\n        /* Set the time directly. */\n        _setTime: function(inst, time, noChange) {\n            var origHours = inst.hours;\n            var origMinutes = inst.minutes;\n            if (time instanceof Date) {\n                inst.hours = time.getHours();\n                inst.minutes = time.getMinutes();\n            } else {\n                var time = this.parseTime(inst, time);\n                inst.hours = time.hours;\n                inst.minutes = time.minutes;\n            }\n\n            if ((origHours != inst.hours || origMinutes != inst.minutes) && !noChange) {\n                inst.input.trigger('change');\n            }\n            this._updateTimepicker(inst);\n            this._updateSelectedValue(inst);\n        },\n\n        /* Return the current time, ready to be parsed, rounded to the closest minute by interval */\n        _getCurrentTimeRounded: function (inst) {\n            var currentTime = new Date(),\n                currentMinutes = currentTime.getMinutes(),\n                minutes_options = this._get(inst, 'minutes'),\n                // round to closest interval\n                adjustedMinutes = Math.round(currentMinutes / minutes_options.interval) * minutes_options.interval;\n            currentTime.setMinutes(adjustedMinutes);\n            return currentTime;\n        },\n\n        /*\n        * Parse a time string into hours and minutes\n        */\n        parseTime: function (inst, timeVal) {\n            var retVal = new Object();\n            retVal.hours = -1;\n            retVal.minutes = -1;\n\n            if(!timeVal)\n                return '';\n\n            var timeSeparator = this._get(inst, 'timeSeparator'),\n                amPmText = this._get(inst, 'amPmText'),\n                showHours = this._get(inst, 'showHours'),\n                showMinutes = this._get(inst, 'showMinutes'),\n                optionalMinutes = this._get(inst, 'optionalMinutes'),\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                p = timeVal.indexOf(timeSeparator);\n\n            // check if time separator found\n            if (p != -1) {\n                retVal.hours = parseInt(timeVal.substr(0, p), 10);\n                retVal.minutes = parseInt(timeVal.substr(p + 1), 10);\n            }\n            // check for hours only\n            else if ( (showHours) && ( !showMinutes || optionalMinutes ) ) {\n                retVal.hours = parseInt(timeVal, 10);\n            }\n            // check for minutes only\n            else if ( ( ! showHours) && (showMinutes) ) {\n                retVal.minutes = parseInt(timeVal, 10);\n            }\n\n            if (showHours) {\n                var timeValUpper = timeVal.toUpperCase();\n                if ((retVal.hours < 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[1].toUpperCase()) != -1)) {\n                    retVal.hours += 12;\n                }\n                // fix for 12 AM\n                if ((retVal.hours == 12) && (showPeriod) && (timeValUpper.indexOf(amPmText[0].toUpperCase()) != -1)) {\n                    retVal.hours = 0;\n                }\n            }\n\n            return retVal;\n        },\n\n        selectNow: function(event) {\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\n                $target = $(id),\n                inst = this._getInst($target[0]);\n            //if (!inst || (input && inst != $.data(input, PROP_NAME))) { return; }\n            var currentTime = new Date();\n            inst.hours = currentTime.getHours();\n            inst.minutes = currentTime.getMinutes();\n            this._updateSelectedValue(inst);\n            this._updateTimepicker(inst);\n            this._hideTimepicker();\n        },\n\n        deselectTime: function(event) {\n            var id = $(event.target).attr(\"data-timepicker-instance-id\"),\n                $target = $(id),\n                inst = this._getInst($target[0]);\n            inst.hours = -1;\n            inst.minutes = -1;\n            this._updateSelectedValue(inst);\n            this._hideTimepicker();\n        },\n\n\n        selectHours: function (event) {\n            var $td = $(event.currentTarget),\n                id = $td.attr(\"data-timepicker-instance-id\"),\n                newHours = parseInt($td.attr(\"data-hour\")),\n                fromDoubleClick = event.data.fromDoubleClick,\n                $target = $(id),\n                inst = this._getInst($target[0]),\n                showMinutes = (this._get(inst, 'showMinutes') == true);\n\n            // don't select if disabled\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\n\n            $td.parents('.ui-timepicker-hours:first').find('a').removeClass('ui-state-active');\n            $td.children('a').addClass('ui-state-active');\n            inst.hours = newHours;\n\n            // added for onMinuteShow callback\n            var onMinuteShow = this._get(inst, 'onMinuteShow'),\n                maxTime = this._get(inst, 'maxTime'),\n                minTime = this._get(inst, 'minTime');\n            if (onMinuteShow || !isNaN(parseInt(maxTime.minute)) || !isNaN(parseInt(minTime.minute))) {\n                // this will trigger a callback on selected hour to make sure selected minute is allowed. \n                this._updateMinuteDisplay(inst);\n            }\n\n            this._updateSelectedValue(inst);\n\n            inst._hoursClicked = true;\n            if ((inst._minutesClicked) || (fromDoubleClick) || (showMinutes == false)) {\n                $.timepicker._hideTimepicker();\n            }\n            // return false because if used inline, prevent the url to change to a hashtag\n            return false;\n        },\n\n        selectMinutes: function (event) {\n            var $td = $(event.currentTarget),\n                id = $td.attr(\"data-timepicker-instance-id\"),\n                newMinutes = parseInt($td.attr(\"data-minute\")),\n                fromDoubleClick = event.data.fromDoubleClick,\n                $target = $(id),\n                inst = this._getInst($target[0]),\n                showHours = (this._get(inst, 'showHours') == true);\n\n            // don't select if disabled\n            if ( $.timepicker._isDisabledTimepicker($target.attr('id')) ) { return false }\n\n            $td.parents('.ui-timepicker-minutes:first').find('a').removeClass('ui-state-active');\n            $td.children('a').addClass('ui-state-active');\n\n            inst.minutes = newMinutes;\n            this._updateSelectedValue(inst);\n\n            inst._minutesClicked = true;\n            if ((inst._hoursClicked) || (fromDoubleClick) || (showHours == false)) {\n                $.timepicker._hideTimepicker();\n                // return false because if used inline, prevent the url to change to a hashtag\n                return false;\n            }\n\n            // return false because if used inline, prevent the url to change to a hashtag\n            return false;\n        },\n\n        _updateSelectedValue: function (inst) {\n            var newTime = this._getParsedTime(inst);\n            if (inst.input) {\n                inst.input.val(newTime);\n                inst.input.trigger('change');\n            }\n            var onSelect = this._get(inst, 'onSelect');\n            if (onSelect) { onSelect.apply((inst.input ? inst.input[0] : null), [newTime, inst]); } // trigger custom callback\n            this._updateAlternate(inst, newTime);\n            return newTime;\n        },\n\n        /* this function process selected time and return it parsed according to instance options */\n        _getParsedTime: function(inst) {\n\n            if (inst.hours == -1 && inst.minutes == -1) {\n                return '';\n            }\n\n            // default to 0 AM if hours is not valid\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\n            // default to 0 minutes if minute is not valid\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\n\n            var period = \"\",\n                showPeriod = (this._get(inst, 'showPeriod') == true),\n                showLeadingZero = (this._get(inst, 'showLeadingZero') == true),\n                showHours = (this._get(inst, 'showHours') == true),\n                showMinutes = (this._get(inst, 'showMinutes') == true),\n                optionalMinutes = (this._get(inst, 'optionalMinutes') == true),\n                amPmText = this._get(inst, 'amPmText'),\n                selectedHours = inst.hours ? inst.hours : 0,\n                selectedMinutes = inst.minutes ? inst.minutes : 0,\n                displayHours = selectedHours ? selectedHours : 0,\n                parsedTime = '';\n\n            // fix some display problem when hours or minutes are not selected yet\n            if (displayHours == -1) { displayHours = 0 }\n            if (selectedMinutes == -1) { selectedMinutes = 0 }\n\n            if (showPeriod) {\n                if (inst.hours == 0) {\n                    displayHours = 12;\n                }\n                if (inst.hours < 12) {\n                    period = amPmText[0];\n                }\n                else {\n                    period = amPmText[1];\n                    if (displayHours > 12) {\n                        displayHours -= 12;\n                    }\n                }\n            }\n\n            var h = displayHours.toString();\n            if (showLeadingZero && (displayHours < 10)) { h = '0' + h; }\n\n            var m = selectedMinutes.toString();\n            if (selectedMinutes < 10) { m = '0' + m; }\n\n            if (showHours) {\n                parsedTime += h;\n            }\n            if (showHours && showMinutes && (!optionalMinutes || m != 0)) {\n                parsedTime += this._get(inst, 'timeSeparator');\n            }\n            if (showMinutes && (!optionalMinutes || m != 0)) {\n                parsedTime += m;\n            }\n            if (showHours) {\n                if (period.length > 0) { parsedTime += this._get(inst, 'periodSeparator') + period; }\n            }\n\n            return parsedTime;\n        },\n\n        /* Update any alternate field to synchronise with the main field. */\n        _updateAlternate: function(inst, newTime) {\n            var altField = this._get(inst, 'altField');\n            if (altField) { // update alternate field too\n                $(altField).each(function(i,e) {\n                    $(e).val(newTime);\n                });\n            }\n        },\n\n        _getTimeAsDateTimepicker: function(input) {\n            var inst = this._getInst(input);\n            if (inst.hours == -1 && inst.minutes == -1) {\n                return '';\n            }\n\n            // default to 0 AM if hours is not valid\n            if ((inst.hours < inst.hours.starts) || (inst.hours > inst.hours.ends )) { inst.hours = 0; }\n            // default to 0 minutes if minute is not valid\n            if ((inst.minutes < inst.minutes.starts) || (inst.minutes > inst.minutes.ends)) { inst.minutes = 0; }\n\n            return new Date(0, 0, 0, inst.hours, inst.minutes, 0);\n        },\n        /* This might look unused but it's called by the $.fn.timepicker function with param getTime */\n        /* added v 0.2.3 - gitHub issue #5 - Thanks edanuff */\n        _getTimeTimepicker : function(input) {\n            var inst = this._getInst(input);\n            return this._getParsedTime(inst);\n        },\n        _getHourTimepicker: function(input) {\n            var inst = this._getInst(input);\n            if ( inst == undefined) { return -1; }\n            return inst.hours;\n        },\n        _getMinuteTimepicker: function(input) {\n            var inst= this._getInst(input);\n            if ( inst == undefined) { return -1; }\n            return inst.minutes;\n        }\n\n    });\n\n\n\n    /* Invoke the timepicker functionality.\n    @param  options  string - a command, optionally followed by additional parameters or\n    Object - settings for attaching new timepicker functionality\n    @return  jQuery object */\n    $.fn.timepicker = function (options) {\n        /* Initialise the time picker. */\n        if (!$.timepicker.initialized) {\n            $(document).mousedown($.timepicker._checkExternalClick);\n            $.timepicker.initialized = true;\n        }\n\n         /* Append timepicker main container to body if not exist. */\n        if ($(\"#\"+$.timepicker._mainDivId).length === 0) {\n            $('body').append($.timepicker.tpDiv);\n        }\n\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\n        if (typeof options == 'string' && (options == 'getTime' || options == 'getTimeAsDate' || options == 'getHour' || options == 'getMinute' ))\n            return $.timepicker['_' + options + 'Timepicker'].\n\t\t\t    apply($.timepicker, [this[0]].concat(otherArgs));\n        if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')\n            return $.timepicker['_' + options + 'Timepicker'].\n                apply($.timepicker, [this[0]].concat(otherArgs));\n        return this.each(function () {\n            typeof options == 'string' ?\n\t\t\t$.timepicker['_' + options + 'Timepicker'].\n\t\t\t\tapply($.timepicker, [this].concat(otherArgs)) :\n\t\t\t$.timepicker._attachTimepicker(this, options);\n        });\n    };\n\n    /* jQuery extend now ignores nulls! */\n    function extendRemove(target, props) {\n        $.extend(target, props);\n        for (var name in props)\n            if (props[name] == null || props[name] == undefined)\n                target[name] = props[name];\n        return target;\n    };\n\n    $.timepicker = new Timepicker(); // singleton instance\n    $.timepicker.initialized = false;\n    $.timepicker.uuid = new Date().getTime();\n    $.timepicker.version = \"0.3.3\";\n\n    // Workaround for #4055\n    // Add another global to avoid noConflict issues with inline event handlers\n    window['TP_jQuery_' + tpuuid] = $;\n\n})(jQuery);\n","(function($) {\n  $.fn.opExtendedSettings = function() {\n    return this.each(function() {\n      var wrap = $(this);\n      var container = wrap.find(\".settings-container\");\n      var toggle = wrap.find(\".collapse-toggle\");\n\n      var hidden = container.hasClass(\"hidden\");\n\n      toggle.click(function() {\n        hidden = !hidden;\n        if (hidden) {\n          container.addClass(\"hidden\");\n          toggle.html(openingHoursData.translations.moreSettings);\n        } else {\n          container.removeClass(\"hidden\");\n          toggle.html(openingHoursData.translations.fewerSettings);\n        }\n      });\n    });\n  };\n\n  $(document).ready(function() {\n    $(\".extended-settings\").opExtendedSettings();\n    $(document).on(\"widget-updated widget-added\", function(e, widget) {\n      $(widget)\n        .find(\".extended-settings\")\n        .opExtendedSettings();\n    });\n  });\n})(jQuery);\n","/**\n * Opening Hours: JS: Backend: Holidays\n */\n\n/** Holidays Meta Box */\njQuery.fn.opHolidays = function() {\n  var wrap = jQuery(this);\n\n  var holidaysWrap = wrap.find(\"tbody\");\n  var addButton = wrap.find(\".add-holiday\");\n\n  function init() {\n    holidaysWrap.find(\"tr.op-holiday\").each(function(index, element) {\n      jQuery(element).opSingleHoliday();\n    });\n  }\n\n  init();\n\n  function add() {\n    var data = {\n      action: \"op_render_single_dummy_holiday\"\n    };\n\n    jQuery.post(ajax_object.ajax_url, data, function(response) {\n      var newHoliday = jQuery(response).clone();\n\n      newHoliday.opSingleHoliday();\n\n      holidaysWrap.append(newHoliday);\n    });\n  }\n\n  addButton.click(function(e) {\n    e.preventDefault();\n\n    add();\n  });\n};\n\n/** Holiday Item */\njQuery.fn.opSingleHoliday = function() {\n  var wrap = jQuery(this);\n\n  if (wrap.length > 1) {\n    wrap.each(function(index, element) {\n      jQuery(element).opSingleHoliday();\n    });\n\n    return;\n  }\n\n  var removeButton = wrap.find(\".remove-holiday\");\n  var inputDateStart = wrap.find(\"input.date-start\");\n  var inputDateEnd = wrap.find(\"input.date-end\");\n\n  function remove() {\n    wrap.remove();\n  }\n\n  removeButton.click(function(e) {\n    e.preventDefault();\n\n    remove();\n  });\n\n  inputDateStart.datepicker({\n    dateFormat: \"yy-mm-dd\",\n    firstDay: openingHoursData.startOfWeek || 0,\n    dayNames: openingHoursData.weekdays.full,\n    dayNamesMin: openingHoursData.weekdays.short,\n    dayNamesShort: openingHoursData.weekdays.short,\n    onClose: function(date) {\n      inputDateEnd.datepicker(\"option\", \"minDate\", date);\n    }\n  });\n\n  inputDateEnd.datepicker({\n    dateFormat: \"yy-mm-dd\",\n    firstDay: openingHoursData.startOfWeek || 0,\n    dayNames: openingHoursData.weekdays.full,\n    dayNamesMin: openingHoursData.weekdays.short,\n    dayNamesShort: openingHoursData.weekdays.short,\n    onClose: function(date) {\n      inputDateStart.datepicker(\"option\", \"maxDate\", date);\n    }\n  });\n\n  inputDateStart.focus(function() {\n    inputDateStart.blur();\n  });\n\n  inputDateEnd.focus(function() {\n    inputDateEnd.blur();\n  });\n};\n\n/**\n * Mapping\n */\njQuery(document).ready(function() {\n  jQuery(\"#op-holidays-wrap\").opHolidays();\n});\n","/**\n * Opening Hours: JS: Backend: Irregular Openings\n */\n\n/** Irregular Openings Meta Box */\njQuery.fn.opIOs = function() {\n  var wrap = jQuery(this);\n\n  var ioWrap = wrap.find(\"tbody\");\n  var addButton = jQuery(wrap.find(\".add-io\"));\n\n  function init() {\n    ioWrap.find(\"tr.op-irregular-opening\").each(function(index, element) {\n      jQuery(element).opSingleIO();\n    });\n  }\n\n  init();\n\n  function add() {\n    var data = {\n      action: \"op_render_single_dummy_irregular_opening\"\n    };\n\n    jQuery.post(ajax_object.ajax_url, data, function(response) {\n      var newIO = jQuery(response).clone();\n\n      newIO.opSingleIO();\n\n      ioWrap.append(newIO);\n    });\n  }\n\n  addButton.click(function(e) {\n    e.preventDefault();\n\n    add();\n  });\n};\n\n/** Irregular Opening Item */\njQuery.fn.opSingleIO = function() {\n  var wrap = jQuery(this);\n\n  if (wrap.length > 1) {\n    wrap.each(function(index, element) {\n      jQuery(element).opSingleIO();\n    });\n\n    return;\n  }\n\n  var removeButton = wrap.find(\".remove-io\");\n\n  var inputDate = wrap.find(\"input.date\");\n  var inputsTime = wrap.find(\"input.input-timepicker\");\n\n  inputsTime.timepicker({\n    hourText: translations.tp_hour,\n    minuteText: translations.tp_minute\n  });\n\n  inputsTime.focus(function() {\n    inputsTime.blur();\n  });\n\n  inputDate.datepicker({\n    dateFormat: \"yy-mm-dd\",\n    firstDay: openingHoursData.startOfWeek || 0,\n    dayNames: openingHoursData.weekdays.full,\n    dayNamesMin: openingHoursData.weekdays.short,\n    dayNamesShort: openingHoursData.weekdays.short\n  });\n\n  inputDate.focus(function() {\n    inputDate.blur();\n  });\n\n  function remove() {\n    wrap.remove();\n  }\n\n  removeButton.click(function(e) {\n    e.preventDefault();\n\n    remove();\n  });\n};\n\n/**\n * Mapping\n */\njQuery(document).ready(function() {\n  jQuery(\"#op-irregular-openings-wrap\").opIOs();\n});\n","(function($) {\n  $(document).ready(function() {\n    var dateStart = $(\".op-criteria-date-start\");\n    var dateEnd = $(\".op-criteria-date-end\");\n\n    dateStart.addClass(\"input-gray\");\n    dateEnd.addClass(\"input-gray\");\n\n    dateStart.datepicker({\n      dateFormat: \"yy-mm-dd\",\n      firstDay: openingHoursData.startOfWeek || 0,\n      dayNames: openingHoursData.weekdays.full,\n      dayNamesMin: openingHoursData.weekdays.short,\n      dayNamesShort: openingHoursData.weekdays.short,\n      onClose: function(date) {\n        dateEnd.datepicker(\"option\", \"minDate\", date);\n      }\n    });\n\n    dateEnd.datepicker({\n      dateFormat: \"yy-mm-dd\",\n      firstDay: openingHoursData.startOfWeek || 0,\n      dayNames: openingHoursData.weekdays.full,\n      dayNamesMin: openingHoursData.weekdays.short,\n      dayNamesShort: openingHoursData.weekdays.short,\n      onClose: function(date) {\n        dateStart.datepicker(\"option\", \"maxDate\", date);\n      }\n    });\n\n    dateStart.focus(function() {\n      dateStart.blur();\n    });\n\n    dateEnd.focus(function() {\n      dateEnd.blur();\n    });\n\n    $(\"#op-set-detail-child-set-notice\")\n      .parents(\".field\")\n      .hide();\n  });\n})(jQuery);\n","(function($) {\n  $.fn.opPeriodsDay = function() {\n    return this.each(function(index, element) {\n      var wrap = $(element);\n\n      var periodContainer = wrap.find(\".period-container\");\n      var tbody = periodContainer.find(\"tbody\");\n      var btnAddPeriod = wrap.find(\"a.add-period\");\n\n      function addPeriod() {\n        var data = {\n          action: \"op_render_single_period\",\n          weekday: periodContainer.attr(\"data-day\"),\n          set: periodContainer.attr(\"data-set\")\n        };\n\n        $.post(ajax_object.ajax_url, data, function(response) {\n          var newPeriod = $(response).clone();\n          newPeriod.opSinglePeriod();\n          tbody.append(newPeriod);\n        });\n      }\n\n      btnAddPeriod.click(function() {\n        addPeriod();\n      });\n    });\n  };\n\n  $.fn.opSinglePeriod = function() {\n    return this.each(function(index, element) {\n      var wrap = $(element);\n\n      var btnDeletePeriod = wrap.find(\".delete-period\");\n      var inputs_tp = wrap.find(\".input-timepicker\");\n\n      btnDeletePeriod.click(function() {\n        wrap.remove();\n      });\n\n      inputs_tp.timepicker({\n        hourText: translations.tp_hour,\n        minuteText: translations.tp_minute\n      });\n\n      inputs_tp.focus(function() {\n        inputs_tp.blur();\n      });\n    });\n  };\n\n  $(document).ready(function() {\n    var form = $(\".form-opening-hours\");\n    form.find(\"tr.periods-day\").opPeriodsDay();\n    form.find(\"tr.period\").opSinglePeriod();\n  });\n})(jQuery);\n","(function ($) {\n  $.fn.opShortcodeBuilderLink = function () {\n    this.each(function (index, element) {\n      var $element = $(element);\n      var scBuilderUrl = $element.data('shortcode-builder-url');\n      $element.click(function (e) {\n        e.preventDefault();\n        window.open(scBuilderUrl, 'Shortcode Builder', 'width=1024,height=768,status=yes,scrollbars=yes,resizable=yes');\n      });\n    })\n  };\n\n  $(document).ready(function () {\n    $('.op-generate-sc-link').opShortcodeBuilderLink();\n  });\n})(jQuery);\n"]}