rndefine("#RNMainTermOfServiceField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","lit","#RNMainFormBuilderCore/FieldWithPrice.Model","#RNMainDialog/Dialog","#RNMainDialog/DialogBase","lit/decorators","#RNMainFormBuilderCore/FieldBase","#RNMainFormBuilderCore/FieldWithPrice","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainCore/StoreBase"],(function(e,i,t,r,s,n,l,o,a,d,p){"use strict";var c;l.customElement("rn-term-of-service-dialog")(class extends n.DialogBase{constructor(...e){super(...e),this.title="",this.content=""}InternalGetOptions(){return{Title:this.title,Styles:{width:"800px",maxWidth:"80%"}}}SubRender(){return t.html`<div> ${this.content} </div>`}});class h extends r.FieldWithPriceModel{constructor(e,i){super(e,i),this.Options=e,this.IsFocused=!1,this.IsChecked=!1}InternalSerialize(e){super.InternalSerialize(e),e.Value=this.GetValue()}GetStoresInformation(){return!0}GetIsUsed(){return!!super.GetIsUsed()&&this.IsChecked}GetValue(){return this.GetIsVisible()?this.IsChecked:""}InitializeStartingValues(){this.IsChecked=this.GetPreviousDataProperty("Value",!1),this.Link=this.ParseTermOfService()}ParseTermOfService(){let e=this.Options.Text,i=e.indexOf("$$"),r=0;i>=0&&(r=e.indexOf("$$",i+2));let s="",n="",l="";return r>=0?(s=e.substr(0,i),n=e.substr(r+2),l=e.substring(i+2,r)):s=e,t.html` <div style="display:inline-block;margin-left:1px"> <span>${s}</span> <a href=${"#"} @click=${e=>this.ElementClicked(e)}>${l}</a> <span>${n}</span> </div> `}ElementClicked(i){if(i.preventDefault(),"openinanothertab"==this.Options.LinkType)window.open(this.Options.LinkUrl);else{let i=e.EventManager.Publish("GetHTML",{HTML:this.Options.PopUpContent,FormBuilder:this.FormBuilder});s.Dialog.Show(t.html`<rn-term-of-service-dialog .content="${i.Code}" .title="${this.Options.PopUpTitle}"></rn-term-of-service-dialog>`)}}render(){return t.html`<rn-term-of-service-field .model="${this}"></rn-term-of-service-field>`}}let u=l.customElement("rn-term-of-service-field")(c=class extends a.FieldWithPrice{static get properties(){return o.FieldBase.properties}SubRender(){return t.html` <div style="position: relative;"> <input .disabled=${this.model.IsReadonly} type='checkbox' .checked=${this.model.IsChecked} @change=${e=>{this.model.IsChecked=e.target.checked,this.model.FireValueChanged()}}/> ${this.model.Link} </div> `}})||c;var m,f,v;let T=(m=p.StoreDataType(Object),f=class extends d.FieldWithPriceOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"PopUpContent",v,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=i.FieldTypeEnum.TermOfService,this.Label="Term of Service",this.LinkType="popup",this.Text="I agree to $$Term of Service$$",this.PopUpTitle="Term of service",this.PopUpContent=null,this.LinkUrl="http://example.com",this.PriceType=d.PriceTypeEnum.none}},v=babelHelpers.applyDecoratedDescriptor(f.prototype,"PopUpContent",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),f);exports.TermOfServiceFieldModel=h,exports.TermOfServiceField=u,exports.TermOfServiceFieldOptions=T,e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==i.FieldTypeEnum.TermOfService)return new T})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==i.FieldTypeEnum.TermOfService)return new h(e.Options,e.Parent)}))}));
