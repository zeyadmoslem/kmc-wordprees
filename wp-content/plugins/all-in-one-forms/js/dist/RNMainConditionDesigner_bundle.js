rndefine("#RNMainConditionDesigner",["lit","#RNMainCore/LitElementBase","lit/decorators","#RNMainFormBuilderCore/ConditionBase.Options","lit/directives/repeat.js","#RNMainLit/Lit","#RNMainFormBuilderCore/FieldBase.Options","lit-html/directives/live.js","#RNMainCore/Sanitizer","#RNMainCore/WpAjaxPost"],(function(n,i,t,o,e,s,a,p,r,d){"use strict";var l;t.customElement("rn-condition-builder")(class extends i.LitElementBase{static get properties(){return{}}render(){return n.html` <div style="margin-top: 15px;"> ${e.repeat(this.Condition.ConditionGroups,(n=>n.Id),((i,t)=>n.html` <div style="margin-bottom: 10px"> <rn-condition-group .model="${this.model}" @fieldchanged=${()=>this.RecalculateElementsUsed()} @removegroup=${n=>this.RemoveGroup(n.detail)} .ConditionBuilder=${this} .ConditionGroup=${i} .AdditionalConditions=${this.AdditionalConditions}></rn-condition-group> ${t<this.Condition.ConditionGroups.length-1?n.html`<span style="font-weight: bold;">${RNTranslate("or")}</span>`:""} </div> `))} <div style="margin-top: 10px;"> <div style="margin-top: 10px;"> <button style="margin-left: 2px" @click=${n=>{n.preventDefault(),this.CreateGroup()}} class='rnbtn rnbtn-primary'>${RNTranslate("Add new group")}</button> </div> </div> </div> `}RemoveGroup(n){let i=this.Condition.ConditionGroups.indexOf(n);i<0||(this.Condition.ConditionGroups.splice(i,1),0==this.Condition.ConditionGroups.length&&this.FireEvent("AllGroupsRemoved",!0),this.RecalculateElementsUsed(),this.forceUpdate())}CreateGroup(){this.Condition.ConditionGroups.push((new o.ConditionGroupOptions).Merge({ConditionLines:[{}]})),this.forceUpdate()}RecalculateElementsUsed(){this.Condition.ElementsUsed=[];for(let n of this.Condition.ConditionGroups)for(let i of n.ConditionLines)i.Type==o.ConditionLineTypeEnum.Field&&this.Condition.ElementsUsed.push((new o.ElementUsedOptions).Merge({Type:o.ElementUsedTypeEnum.Field,Id:i.FieldId}))}});let u=t.customElement("rn-condition-group")(l=class extends i.LitElementBase{constructor(...n){super(...n),this.AdditionalConditions=[]}static get properties(){return{}}render(){return n.html` <table class='rnConditionGroup' style="margin-bottom: 10px;table-layout: fixed;width: 100%;"> <tbody> ${e.repeat(this.ConditionGroup.ConditionLines,(n=>n.Id),((i,t)=>n.html` <rn-condition-line .model=${this.model} .AdditionalConditions=${this.AdditionalConditions} @removeline=${n=>this.RemoveLine(n.detail)} @addline=${n=>this.AddLineBellow(n.detail)} .ConditionGroup=${this} .ConditionLineOptions=${i}></rn-condition-line> `))} </tbody> </table> `}RemoveLine(n){let i=this.ConditionGroup.ConditionLines.indexOf(n);i<0||(this.ConditionGroup.ConditionLines.splice(i,1),0!=this.ConditionGroup.ConditionLines.length?(this.FireEvent("fieldchanged"),this.forceUpdate()):this.FireEvent("removegroup",this.ConditionGroup))}AddLineBellow(n){let i=this.ConditionGroup.ConditionLines.indexOf(n);i<0||(this.ConditionGroup.ConditionLines.splice(i+1,0,(new o.ConditionLineOptions).Merge()),this.FireEvent("fieldchanged"),this.forceUpdate())}})||l;var C,m={};!function(n){Object.defineProperty(n,"__esModule",{value:!0});var i="times",t=[],o="f00d",e="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z";n.definition={prefix:"fas",iconName:i,icon:[352,512,t,o,e]},n.faTimes=n.definition,n.prefix="fas",n.iconName=i,n.width=352,n.height=512,n.ligatures=t,n.unicode=o,n.svgPathData=e}(m);class h{Initialize(n,i){return this.Condition=n,this.Model=i,this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.None&&this.InitializeValues(),this}}class y extends h{GetComparator(){return n.html`<select style="width:100%;height: auto;padding: 0;" disabled/>`}GetValueInput(){return n.html`<input value="" style="width: 100%;height: 30px;" type='text' disabled/>`}InitializeValues(){}}class c extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Contains}" value=${o.ComparisonTypeEnum.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.NotContains}" value=${o.ComparisonTypeEnum.NotContains}>${RNTranslate("Not Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty}" value=${o.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty}" value=${o.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.Contains}GetValueInput(){if(this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty||this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty)return null;let i=this.GetAvailableOptions(),t=i.filter((n=>this.Condition.ConditionLineOptions.Value.indexOf(n.value)>=0)).map((n=>n.value));return n.html` <rn-inputs-select style="min-height: 30px" multiple .value="${t}" @change="${n=>this.OnChange(n.detail)}" .propertyName="${"Type"}" .options="${i.map((n=>({Label:n.label,Value:n.value})))}"></rn-inputs-select> `}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}GetAvailableOptions(){let n=[];if(this.Condition.ConditionLineOptions.Type==o.ConditionLineTypeEnum.Field){let i=this.Condition.ConditionGroup.ConditionBuilder.FormBuilder.GetFields().find((n=>n.Options.Id.toString()==this.Condition.ConditionLineOptions.FieldId));if(null==i)return n;for(let t of i.Options.Options)n.push({label:t.Label,value:t.Id})}return n}OnChange(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}}class T extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Equal}" .value=${o.ComparisonTypeEnum.Equal}>${RNTranslate("Equal To")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.NotEqual}" .value=${o.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.GreaterThan}" .value=${o.ComparisonTypeEnum.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.GreaterOrEqualThan}" .value=${o.ComparisonTypeEnum.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.LessThan}" .value=${o.ComparisonTypeEnum.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.LessOrEqualThan}" .value=${o.ComparisonTypeEnum.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty}" .value=${o.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty}" .value=${o.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Value=r.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,0)}GetValueInput(){return this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty||this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty?null:n.html` <rn-inputs-datepicker style="height: 30px;min-height: 30px;margin-bottom: 0;" .value="${this.Condition.ConditionLineOptions.Value}" @change="${n=>this.Condition.ConditionLineOptions.Value=n.detail}"></rn-inputs-datepicker> `}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}ValueChanged(n){}GetContainer(n){document.getElementsByTagName("body")}}class E extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Equal}" value=${o.ComparisonTypeEnum.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.NotEqual}" value=${o.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.GreaterThan}" value=${o.ComparisonTypeEnum.GreaterThan}>${RNTranslate("Greater than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.GreaterOrEqualThan}" value=${o.ComparisonTypeEnum.GreaterOrEqualThan}>${RNTranslate("Greater or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.LessThan}" value=${o.ComparisonTypeEnum.LessThan}>${RNTranslate("Less than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.LessOrEqualThan}" value=${o.ComparisonTypeEnum.LessOrEqualThan}>${RNTranslate("Less or equal than")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty}" value=${o.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty}" value=${o.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.Equal,this.Condition.ConditionLineOptions.Value=r.Sanitizer.SanitizeNumber(this.Condition.ConditionLineOptions.Value,"")}GetValueInput(){let i=this.Condition.ConditionLineOptions.Comparison;return n.html`<input type="number" value=${p.live(this.Condition.ConditionLineOptions.Value)} @change=${n=>this.ValueChanged(n.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;" type='text' ?disabled=${i==o.ComparisonTypeEnum.IsEmpty||i==o.ComparisonTypeEnum.IsNotEmpty}/>`}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}ValueChanged(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}}class $ extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: auto;padding: 0;margin-left: 5px;width:100%;"> <option value=${o.ComparisonTypeEnum.IsChecked}>${RNTranslate("Is Checked")}</option> <option value=${o.ComparisonTypeEnum.IsNotChecked}>${RNTranslate("Is Not Checked")}</option> </select> `}GetValueInput(){return null}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}ValueChanged(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.IsChecked}}class L extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: auto;padding: 0;margin-left: 5px;width: 100%"> <option value=${o.ComparisonTypeEnum.WasClicked}>${RNTranslate("Was Clicked")}</option> </select>`}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.WasClicked}GetValueInput(){return null}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}ValueChanged(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}}class O{constructor(){this._loadingUsers=null,this._loadingUsersQueue=[],this._cachedUsers=new Map}static GetInstance(){return null==O._Instance&&(O._Instance=new O),O._Instance}async GetUsersById(n){return this.MaybeLoadUsers(n)}GetUserList(){return Array.from(this._cachedUsers.values())}async MaybeLoadUsers(n){let i=[];for(let t of n)this._cachedUsers.has(t)||i.push(t);if(0==i.length)return!0;let t=await d.WpAjaxPost.Post("load_users_by_id",{Ids:i},"",null,{Prefix:rnConditionDesignerVar._prefix,Nonce:rnConditionDesignerVar._nonce});if(null==t)return!1;for(let n of t)this.AddUser(n.Value,n.Label);return n.forEach((n=>{this._cachedUsers.has(n)||this.AddUser(n,"Unknown")})),!0}HasAllUsers(n){for(let i of n)if(!this._cachedUsers.has(i))return!1;return!0}AddUser(n,i){this._cachedUsers.has(n)||this._cachedUsers.set(n,{Value:n,Label:i})}}class g extends h{constructor(){super(),this.LoadUsers=this.LoadUsers.bind(this)}GetComparator(){return n.html` <select .value="${this.Condition.ConditionLineOptions.Comparison}" @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: 28px;padding: 0;width: 100%;"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.ViewingPage}" .value="${o.ComparisonTypeEnum.ViewingPage}">${RNTranslate("User viewing the page")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Is}" .value="${o.ComparisonTypeEnum.Is}">${RNTranslate("Is")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNot}" .value="${o.ComparisonTypeEnum.IsNot}">${RNTranslate("Is Not")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsPartOfRole}" .value="${o.ComparisonTypeEnum.IsPartOfRole}">${RNTranslate("Is part of role")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotPartOfRole}" .value="${o.ComparisonTypeEnum.IsNotPartOfRole}">${RNTranslate("Is not part of role")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsGuest}" .value="${o.ComparisonTypeEnum.IsGuest}">${RNTranslate("Is guest")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotGuest}" .value="${o.ComparisonTypeEnum.IsNotGuest}">${RNTranslate("Is not guest")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.Is,this.Condition.ConditionLineOptions.Value=[]}GetValueInput(){return[o.ComparisonTypeEnum.ViewingPage,o.ComparisonTypeEnum.IsGuest,o.ComparisonTypeEnum.IsNotGuest].indexOf(this.Condition.ConditionLineOptions.Comparison)>=0?null:[o.ComparisonTypeEnum.IsPartOfRole,o.ComparisonTypeEnum.IsNotPartOfRole].indexOf(this.Condition.ConditionLineOptions.Comparison)>=0?n.html` <rn-inputs-select style="min-height: 30px" multiple .value="${this.Condition.ConditionLineOptions.Value}" @change="${n=>this.OnChange(n.detail)}" .propertyName="${"Type"}" .options="${rnConditionDesignerVar.Roles.map((n=>({Label:n.Label,Value:n.Id})))}"></rn-inputs-select> `:[o.ComparisonTypeEnum.Is,o.ComparisonTypeEnum.IsNot].indexOf(this.Condition.ConditionLineOptions.Comparison)>=0?this.GetUserControl():void 0}async LoadUsers(n,i){let t=await d.WpAjaxPost.Post("list_users",{query:n},"",null,{Nonce:rnConditionDesignerVar._nonce,Prefix:rnConditionDesignerVar._prefix});if(null!=t)for(let n of t)O.GetInstance().AddUser(n.Value,n.Label);i(t)}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.ConditionLineOptions.Value=[],this.Condition.forceUpdate()}ValueChanged(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}GetAvailableOptions(){let n=[];for(let i of rednaoFormDesigner.Roles)n.push({label:i.Label,value:i.Id});return n}OnChange(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}GetUserControl(){let i=r.Sanitizer.SanitizeStringArray(this.Condition.ConditionLineOptions.Value);return O.GetInstance().HasAllUsers(i)?n.html` <rn-inputs-select .load="${this.LoadUsers}" style="min-height: 30px" multiple .value="${this.Condition.ConditionLineOptions.Value}" @change="${n=>this.OnChange(n.detail)}" .options="${O.GetInstance().GetUserList()}" .propertyName="${"Type"}"></rn-inputs-select> `:(O.GetInstance().GetUsersById(i).then((n=>this.Condition.forceUpdate())),n.html`<span>Loading users</span>`)}}class I extends h{GetComparator(){return n.html` <select value=${this.Condition.ConditionLineOptions.Comparison} @change=${n=>this.ComparisonChanged(n.target.value.toString())} style="height: 28px;padding: 0;width: 100%"> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Equal}" .value=${o.ComparisonTypeEnum.Equal}>${RNTranslate("Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.NotEqual}" .value=${o.ComparisonTypeEnum.NotEqual}>${RNTranslate("Not Equal to")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsEmpty}" .value=${o.ComparisonTypeEnum.IsEmpty}>${RNTranslate("Is Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.IsNotEmpty}" .value=${o.ComparisonTypeEnum.IsNotEmpty}>${RNTranslate("Is Not Empty")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.Contains}" .value=${o.ComparisonTypeEnum.Contains}>${RNTranslate("Contains")}</option> <option ?selected="${this.Condition.ConditionLineOptions.Comparison==o.ComparisonTypeEnum.NotContains}" .value=${o.ComparisonTypeEnum.NotContains}>${RNTranslate("Not Contains")}</option> </select> `}InitializeValues(){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.Equal}GetValueInput(){let i=this.Condition.ConditionLineOptions.Comparison;return n.html`<input value=${p.live(this.Condition.ConditionLineOptions.Value)} @change=${n=>this.ValueChanged(n.target.value)} style="min-width: 100%;max-width: 200px;height: 30px;width: 100%;" type='text' ?disabled=${i==o.ComparisonTypeEnum.IsEmpty||i==o.ComparisonTypeEnum.IsNotEmpty}/>`}ComparisonChanged(n){this.Condition.ConditionLineOptions.Comparison=o.ComparisonTypeEnum[n],this.Condition.forceUpdate()}ValueChanged(n){this.Condition.ConditionLineOptions.Value=n,this.Condition.forceUpdate()}}let v=t.customElement("rn-condition-line")(C=class extends i.LitElementBase{constructor(...n){super(...n),this.EntryGroup=[{Id:"_sequence",Label:"Entry Number",Type:o.SubTypeEnum.Numeric},{Id:"_creation_date",Label:"Creation Date",Type:o.SubTypeEnum.Date},{Id:"_submitted_by",Label:"Submitted By",Type:o.SubTypeEnum.Role}]}static get properties(){return{}}render(){let i=this.GetFields(this.ConditionGroup.ConditionBuilder.FormBuilder),t=class{static GetComparator(n,i){switch(n.ConditionLineOptions.Type){case o.ConditionLineTypeEnum.None:return new y;case o.ConditionLineTypeEnum.Entry:case o.ConditionLineTypeEnum.Field:return n.ConditionLineOptions.SubType==o.SubTypeEnum.MultipleValues?(new c).Initialize(n,i):n.ConditionLineOptions.SubType==o.SubTypeEnum.Date?(new T).Initialize(n,i):n.ConditionLineOptions.SubType==o.SubTypeEnum.Numeric?(new E).Initialize(n,i):n.ConditionLineOptions.SubType==o.SubTypeEnum.Checkbox?(new $).Initialize(n,i):n.ConditionLineOptions.SubType==o.SubTypeEnum.Button?(new L).Initialize(n,i):(n.ConditionLineOptions.SubType,o.SubTypeEnum.Status,n.ConditionLineOptions.SubType==o.SubTypeEnum.Role?(new g).Initialize(n,i):(new I).Initialize(n,i));case o.ConditionLineTypeEnum.Variation:return(new c).Initialize(n,i)}return new y}}.GetComparator(this,this.model),e=t.GetValueInput();return n.html` <tr style="display: flex;align-items: flex-start;margin-bottom: 5px;"> <td style="width: 30%"> <select .value="${p.live(this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId))}" style="height: 28px;padding: 0;width: 100%" @change=${n=>this.FieldChanged(n.target[n.target.selectedIndex].getAttribute("data-type").toString(),n.target[n.target.selectedIndex].getAttribute("data-field-id").toString(),n.target[n.target.selectedIndex].getAttribute("data-path-id").toString(),n.target[n.target.selectedIndex])}> <option data-linetype=${o.ConditionLineTypeEnum.None.toString()} id=''>${RNTranslate("Select a field")}</option> <optgroup label="Entry"> ${this.EntryGroup.map((i=>n.html` <option data-type="${o.ConditionLineTypeEnum.Entry}" ?selected="${i.Id==this.ConditionLineOptions.FieldId&&this.ConditionLineOptions.Type==o.ConditionLineTypeEnum.Entry}" data-field-id="${i.Id}" data-path-id="" data-subtype="${i.Type}" .value="${i.Id}">${i.Label}</option> `))} </optgroup> <optgroup label=${RNTranslate("Fields")}> ${this.GetSelectOptions(i,0)} </optgroup> </select> </td> <td style="width:${null==e?"calc(70% - 80px)":"20%"}"> ${t.GetComparator()} </td> ${s.rnIf(null!=e&&n.html` <td style="width: calc(50% - 80px)"> ${t.GetValueInput()} </td> `)} <td style="width: 80px"> <button @click=${n=>{n.preventDefault(),this.FireEvent("addline",this.ConditionLineOptions)}} class='rnbtn rnbtn-light' style="margin-left: 5px;padding: 1px 5px;">${RNTranslate("AND")}</button> <span style="line-height: 25px;vertical-align: middle;cursor: pointer;" @click=${n=>{n.preventDefault(),this.FireEvent("removeline",this.ConditionLineOptions)}} class="rnline"><rn-fontawesome .icon=${m.faTimes} style="margin-left: 5px"/></span> </td> </tr> `}GetSelectOptions(i,t){let e=this.ConditionLineOptions.FieldId+(""==this.ConditionLineOptions.PathId?"":"_"+this.ConditionLineOptions.PathId);return(i=i.filter((n=>n.GetStoresInformation())).filter((n=>n.Options.Type!=a.FieldTypeEnum.None)).sort(((n,i)=>n.Options.Label.localeCompare(i.Options.Label)))).filter((n=>{var i;return n.Options.Id.toString()!=(null===(i=this.ConditionGroup.ConditionBuilder.FieldToHide)||void 0===i?void 0:i.Options.Id.toString())})).map((i=>n.html` <option data-type="${o.ConditionLineTypeEnum.Field}" ?selected="${i.Options.Id.toString()==e}" ?disabled="${i.IsFieldContainer}" data-field-id="${i.Options.Id}" data-path-id="" .value="${i.Options.Id.toString()}">${this.GetSpaces(t)}${i.Options.Label+(""!=i.Options.Label.trim()?" ":"")+"(Id: "+i.Options.Id+")"}</option> ${s.rnIf(i.GetSubSections().length>0&&i.GetSubSections().map((s=>n.html` <option data-type="${o.ConditionLineTypeEnum.Field}" ?selected="${i.Options.Id+"_"+s.PathId==e}" data-field-id="${i.Options.Id}" data-path-id="${s.PathId}" .value="${i.Options.Id+"_"+s.PathId}">${this.GetSpaces(t+1)}${s.Label}</option> `)))} ${s.rnIf(i.IsFieldContainer&&this.GetSelectOptions(this.GetFields(i),t+1))} `))}GetSpaces(i){let t=[];for(let o=0;o<i;o++)t.push(n.html`&nbsp;&nbsp;&nbsp;`);return t}FieldChanged(n,i,t,e){let s=o.SubTypeEnum.Standard;if(this.ConditionLineOptions.Value="",this.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.None,n==o.ConditionLineTypeEnum.Field){var p;let n=null===(p=this.ConditionGroup.ConditionBuilder.FormBuilder.GetFieldById(i))||void 0===p?void 0:p.Options;if(null==n)return;null!=n&&[a.FieldTypeEnum.Checkbox,a.FieldTypeEnum.Radio,a.FieldTypeEnum.DropDown,a.FieldTypeEnum.ButtonSelection].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.MultipleValues,this.ConditionLineOptions.Value=[]),null!=n&&[a.FieldTypeEnum.Slider].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.Numeric,this.ConditionLineOptions.Value=[]),null!=n&&[a.FieldTypeEnum.Datepicker,a.FieldTypeEnum.DateRange].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.Date,this.ConditionLineOptions.Value=[]),null!=n&&[a.FieldTypeEnum.List].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.List,this.ConditionLineOptions.Value=""),null!=n&&[a.FieldTypeEnum.Switch].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.Checkbox,this.ConditionLineOptions.Value=[]),null!=n&&[a.FieldTypeEnum.ActionButton].indexOf(n.Type)>=0&&(s=o.SubTypeEnum.Button,this.ConditionLineOptions.Value=[])}n==o.ConditionLineTypeEnum.Entry&&(s=e.getAttribute("data-subtype")),this.ConditionLineOptions.FieldId=i,this.ConditionLineOptions.PathId=t,this.ConditionLineOptions.Comparison=o.ComparisonTypeEnum.None,this.ConditionLineOptions.Type=n,this.ConditionLineOptions.SubType=s,this.FireEvent("fieldchanged",null,!0),this.forceUpdate()}GetFields(n){var i,t;n.IsFieldContainer&&n.Options.Type==a.FieldTypeEnum.Repeater&&(n=null===(i=n.Rows[0])||void 0===i||null===(t=i.Columns[0])||void 0===t?void 0:t.Field);return null==n?[]:n.GetFields(!1,!1,!1).filter((n=>n.GetStoresInformation()&&[a.FieldTypeEnum.Signature,a.FieldTypeEnum.TermOfService,a.FieldTypeEnum.TextualImage,a.FieldTypeEnum.FileUpload].indexOf(n.Options.Type)<0))}})||C;exports.ConditionBuilderModel=class{constructor(){this._roles=null,this._userNonce=""}render(i,t,o=null,e=null){return n.html` <rn-condition-builder @AllGroupsRemoved=${n=>null!=o&&o()} .model="${this}" .FormBuilder="${i}" .Condition="${t}" .FieldToHide=${e} ></rn-condition-builder> `}},exports.ConditionGroup=u,exports.ConditionLine=v,exports.ConditionGroupBase=class{GetOptionById(n){return this.GetOptions().find((i=>i.Id==n))}}}));
