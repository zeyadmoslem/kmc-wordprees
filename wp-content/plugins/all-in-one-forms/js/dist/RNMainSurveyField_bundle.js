rndefine("#RNMainSurveyField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainFormBuilderCore/FieldWithPrice.Model","lit","#RNMainFormBuilderCore/CalculatorBase","#RNMainCore/Sanitizer","lit/decorators","#RNMainFormBuilderCore/FieldBase","#RNMainFormBuilderCore/FieldWithPrice","lit/directives/repeat.js","#RNMainCore/StoreBase","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainFormBuilderCore/ItemOptions.Options"],(function(e,t,i,l,s,r,o,n,d,a,u,c,h){"use strict";class p extends s.CalculatorBase{constructor(){super(),this.OptionsTotal=[]}ExecuteCalculation(e,t){this.OptionsTotal=[];let i=this.Field.GetSelectedOptions();if(0==i.length)return{RegularPrice:"",Quantity:0};for(let e of i){let t=e.Column.RegularPrice,i={RowId:e.Row.Id,ColumnId:e.Column.Id,RegularPrice:t,UnitPrice:t,Quantity:0};""==i.UnitPrice?i.UnitPrice=0:i.UnitPrice=parseFloat(i.UnitPrice),isNaN(i.UnitPrice)&&(i.UnitPrice=0),i.Price=i.UnitPrice,this.OptionsTotal.push(i)}let l={RegularPrice:0,Quantity:this.GetQuantity()};for(let e of this.OptionsTotal)l.RegularPrice+=r.Sanitizer.SanitizeNumber(e.Price,0);return l}}class m extends i.FieldWithPriceModel{constructor(e,t){super(e,t),this.Options=e,this.IsFocused=!1,this.SelectedValues=[]}InternalSerialize(e){if(super.InternalSerialize(e),e.SelectedValues=this.GetSelectedOptions().map((e=>({Row:e.Row.ToObject(),Column:e.Column.ToObject()}))),this.Calculator instanceof p)for(let t=0;t<e.SelectedValues.length;t++){let i=this.Calculator.OptionsTotal.find((i=>i.RowId==e.SelectedValues[t].Row.Id&&i.ColumnId==e.SelectedValues[t].Column.Id));null==i&&(i={Id:e.SelectedValues[t].Id,Price:0,Quantity:0,RegularPrice:0,SalePrice:0,Total:0}),e.SelectedValues[t]=Object.assign(e.SelectedValues[t],i)}}GetSelectedOptions(){if(!this.GetIsVisible())return[];let e=[];for(let t of this.GetValue()){let i=this.UsedRows.find((e=>e.Id==t.RowId)),l=this.UsedColumns.find((e=>e.Id==t.ColumnId));e.push({Row:i,Column:l})}return e}GetStoresInformation(){return!0}GetIsUsed(){return!!super.GetIsUsed()&&this.GetValue().length>0}GetValue(){if(!this.GetIsVisible())return[];for(let e of this.UsedRows)if(null==this.SelectedValues.find((t=>t.RowId==e.Id)))return[];return this.SelectedValues}InitializeStartingValues(){if(this.SelectedValues=[],this.UsedColumns=this.Options.Columns,this.UsedRows=this.Options.Rows,null!=this.GetPreviousData()){let e=this.GetPreviousDataProperty("SelectedValues",[]);for(let t of e)this.SelectedValues.push({RowId:t.Row.Id,ColumnId:t.Column.Id})}}IsOptionSelected(e,t){return null!=this.SelectedValues.find((i=>i.RowId==e&&i.ColumnId==t))}GetDynamicFieldNames(){return["FBSurvey"]}ToggleSelection(e,t,i){if(this.Options.AllowMultiple)i&&!this.SelectedValues.find((i=>i.ColumnId==t&&i.RowId==e))&&this.SelectedValues.push({RowId:e,ColumnId:t}),!i&&this.SelectedValues.find((i=>i.ColumnId==t&&i.RowId==e))&&this.SelectedValues.splice(this.SelectedValues.indexOf(this.SelectedValues.find((i=>i.ColumnId==t&&i.RowId==e))),1);else if(i){let i=this.SelectedValues.filter((t=>t.RowId==e));for(let e of i)this.SelectedValues.splice(this.SelectedValues.indexOf(e),1);this.SelectedValues.push({RowId:e,ColumnId:t})}else{let i=this.SelectedValues.find((i=>i.ColumnId==t&&i.RowId==e));null!=i&&this.SelectedValues.splice(this.SelectedValues.indexOf(i),1)}this.GetValue().length>0&&this.RemoveError("required"),this.FireValueChanged()}render(){return l.html`<rn-survey-field .model="${this}"></rn-survey-field>`}}var I;let S=o.customElement("rn-survey-field")(I=class extends d.FieldWithPrice{static get properties(){return n.FieldBase.properties}SubRender(){return l.html` <table style="width: 100%;margin:0"> <thead> ${this.CreateHeader()} </thead> <tbody> ${this.model.UsedRows.map((e=>this.CreateRow(e)))} </tbody> </table> `}CreateHeader(){return l.html` <tr> <th> </th> ${a.repeat(this.model.UsedColumns,(e=>e.Id),(e=>l.html` <th style="text-align: center">${e.Label}</th> `))} </tr> `}CreateRow(e){return l.html` <tr> <td> ${e.Label} </td> ${a.repeat(this.model.UsedColumns,(e=>e.Id),(t=>l.html` <td style="text-align: center" @click=${()=>this.model.ToggleSelection(e.Id,t.Id,!this.model.IsOptionSelected(e.Id,t.Id))}> ${this.model.Options.AllowMultiple?l.html` <input name=${e.Id.toString()} type='checkbox' .checked=${this.model.IsOptionSelected(e.Id,t.Id)} @click=${i=>{i.stopPropagation(),this.model.ToggleSelection(e.Id,t.Id,!this.model.IsOptionSelected(e.Id,t.Id))}}/>`:l.html` <input name=${e.Id.toString()} type='radio' .checked=${this.model.IsOptionSelected(e.Id,t.Id)} @click=${i=>{i.stopPropagation(),this.model.ToggleSelection(e.Id,t.Id,!this.model.IsOptionSelected(e.Id,t.Id))}} /> `} </td> `))} </tr> `}})||I;var f,C,R,y,b,O,w;let V=(f=u.StoreDataType(h.ItemOptions),C=u.StoreDataType(h.ItemOptions),R=u.StoreDataType(h.AdditionalColumnOptions),y=class extends c.FieldWithPriceOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"Columns",b,this),babelHelpers.initializerDefineProperty(this,"Rows",O,this),babelHelpers.initializerDefineProperty(this,"AdditionalOptionColumn",w,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Type=t.FieldTypeEnum.Survey,this.Label="Survey",this.Columns=[],this.Rows=[],this.AdditionalOptionColumn=[],this.Columns=[],this.AllowMultiple=!1}},b=babelHelpers.applyDecoratedDescriptor(y.prototype,"Columns",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),O=babelHelpers.applyDecoratedDescriptor(y.prototype,"Rows",[C],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),w=babelHelpers.applyDecoratedDescriptor(y.prototype,"AdditionalOptionColumn",[R],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),y);exports.SurveyFieldModel=m,exports.SurveyField=S,exports.SurveyFieldOptions=V,e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==t.FieldTypeEnum.Survey)return new V})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==t.FieldTypeEnum.Survey)return new m(e.Options,e.Parent)})),e.EventManager.Subscribe("GetCalculator",(e=>{if("survey_options"==e)return new p}))}));
