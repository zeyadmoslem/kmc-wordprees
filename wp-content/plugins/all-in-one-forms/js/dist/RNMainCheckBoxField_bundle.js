rndefine("#RNMainCheckBoxField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainFormBuilderCore/MultipleOptionsBase","lit/decorators","lit","lit/directives/repeat.js","#RNMainFormBuilderCore/MultipleOptionsBase.Model","#RNMainFormBuilderCore/MultipleOptionsBase.Options"],(function(e,t,i,l,o,s,n,d){"use strict";var r;let a=l.customElement("rn-checkbox-field")(r=class extends i.MultipleOptionsBase{SubRender(){return o.html` <div style="position: relative;display: block;" class="layout_${this.model.Options.Layout}"> ${s.repeat(this.model.OptionItemsToUse,(e=>e.Id),(e=>o.html` <div class="option_item"> <input @change="${t=>{this.model.ToggleSelection(e.Id,t.target.checked)}}" type="checkbox" .checked="${this.model.IsOptionSelected(e.Id)}"/> <label @click="${t=>this.model.ToggleSelection(e.Id)}">${e.Label}</label> </div> `))} </div> `}})||r;class c extends n.MultipleOptionsBaseModel{render(){return o.html` <rn-checkbox-field .model="${this}"></rn-checkbox-field> `}}class p extends d.MultipleOptionsBaseOptions{LoadDefaultValues(){super.LoadDefaultValues(),this.Label="Checkbox",this.Type=t.FieldTypeEnum.Checkbox,this.Layout="1"}}e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==t.FieldTypeEnum.Checkbox)return new p})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==t.FieldTypeEnum.Checkbox)return new c(e.Options,e.Parent)})),exports.CheckBoxField=a,exports.CheckBoxFieldModel=c,exports.CheckBoxFieldOptions=p}));
