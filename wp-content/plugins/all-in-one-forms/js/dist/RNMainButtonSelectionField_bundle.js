rndefine("#RNMainButtonSelectionField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","#RNMainFormBuilderCore/MultipleOptionsBase","lit/decorators","lit","lit/directives/repeat.js","#RNMainLit/Lit","#RNMainFormBuilderCore/MultipleOptionsBase.Model","#RNMainFormBuilderCore/MultipleOptionsBase.Options","#RNMainFormBuilderCore/FormBuilder.Options","#RNMainFormBuilderCore/ItemOptions.Options","#RNMainCore/StoreBase"],(function(e,t,i,l,n,o,r,s,a,p,u,c){"use strict";var d;let m=l.customElement("rn-button-selection-field")(d=class extends i.MultipleOptionsBase{SubRender(){let e=parseInt(this.model.Options.NumberOfColumns.toString());(0==e||isNaN(e))&&(e=3);let t=100/e,i=this.model.OptionItemsToUse.length%e;0!=i&&(i=e-i);let l=[];for(let o=0;o<i;o++)l.push(n.html`<div style="width: ${e>1?`calc(${t}% - 10px)`:"100%"}"/>`);return n.html` <div class='buttonSelectionItemContainer'> ${o.repeat(this.model.OptionItemsToUse,(e=>e.Id),(i=>n.html` <div class="${"buttonselectoritem "+(this.model.SelectedValues.some((e=>e==i.Id))?"rnSelected":"")}" style="display: flex;align-items: center;width:${e>1?`calc(${t}% - 10px)`:"100%"};flex-direction: ${this.GetItemDirection(i)}" @click=${e=>this.model.ToggleSelection(i.Id)}> ${this.GetImageControl(i)} ${this.GetLabelControl(i)} </div> `))} ${o.repeat(l,((e,t)=>t),(e=>n.html`${e}`))} </div> `}GetImageControl(e){return"icon"==e.Icon.ImageType?this.GetImageContainer(n.html` <div style="font-size: 80px;max-width: 80px;max-height: 80px;text-align: center;"> <rn-icon-displayer .formBuilder="${this.model.FormBuilder}" .icon=${e.Icon} style="display: block"/> </div>`):"image"==e.Icon.ImageType?this.GetImageContainer(n.html` <img style="width: 80px;height: 80px;" src=${e.Icon.Ref.URL} alt='Image not available'/> `):null}GetImageContainer(e){return n.html` <div style="width: 90px;height: 90px;display: flex;align-items: center;justify-content: center;" class='RNButtonSelectorImageContainer'> ${e} </div> `}GetLabelControl(e){return e.Icon.ImageType,n.html` <div class="rnButtonSelectorLabelContainer" style={styles}> <label class='rnOptionItem' style="cursor: pointer;margin: 0 2px 0 0;">${e.Label}</label> ${r.rnIf(this.model.Options.ShowPriceInEachButton&&n.html`<rnprice .amount=${parseFloat(e.RegularPrice)} style="display: block;margin-top: 1px;"></rnprice>`)} </div> `}GetItemDirection(e){switch(this.model.Options.ImagePosition){case"left":return"row";case"right":return"row-reverse";case"top":return"column";case"bottom":return"column-reverse"}}})||d;class h extends s.MultipleOptionsBaseModel{render(){return n.html` <rn-button-selection-field .model="${this}"></rn-button-selection-field> `}get AllowMultiple(){return this.Options.AllowMultipleSelection}}var g,I,b;class O extends u.ItemOptions{LoadDefaultValues(){super.LoadDefaultValues(),this.Type="Button",this.Icon=(new p.IconOptions).Merge()}}let B=(g=c.StoreDataType(O),I=class extends a.MultipleOptionsBaseOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"Options",b,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.Label="Button Selection",this.Type=t.FieldTypeEnum.ButtonSelection,this.ImagePosition="left",this.AllowMultipleSelection=!1,this.NumberOfColumns=3,this.ShowPriceInEachButton=!0,this.Options=[(new O).Merge({Id:1,RegularPrice:"",Label:"Option 1"}),(new O).Merge({Id:2,RegularPrice:"",Label:"Option 2"}),(new O).Merge({Id:3,RegularPrice:"",Label:"Option 3"})]}},b=babelHelpers.applyDecoratedDescriptor(I.prototype,"Options",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),I);e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==t.FieldTypeEnum.ButtonSelection)return new B})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==t.FieldTypeEnum.ButtonSelection)return new h(e.Options,e.Parent)})),exports.ButtonSelectionField=m,exports.ButtonSelectionFieldModel=h,exports.ButtonSelectionFieldOptions=B}));
