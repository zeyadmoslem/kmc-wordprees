rndefine("#RNMainImagePickerField",["#RNMainCore/EventManager","#RNMainFormBuilderCore/FieldBase.Options","lit","#RNMainFormBuilderCore/MultipleOptionsBase.Model","lit/decorators","#RNMainFormBuilderCore/FieldBase","lit/directives/repeat.js","#RNMainLit/Lit","#RNMainFormBuilderCore/MultipleOptionsBase","#RNMainCore/StoreBase","#RNMainFormBuilderCore/FieldWithPrice.Options","#RNMainFormBuilderCore/MultipleOptionsBase.Options","#RNMainFormBuilderCore/ItemOptions.Options","#RNMainFormBuilderCore/FormBuilder.Options"],(function(e,i,t,r,l,n,s,o,a,p,d,m,c,u){"use strict";class g extends r.MultipleOptionsBaseModel{constructor(e,i){super(e,i),this.Options=e}get AllowMultiple(){return this.Options.AllowMultipleSelection}render(){return t.html`<rn-image-picker-field .model="${this}"></rn-image-picker-field>`}}var h;let I=l.customElement("rn-image-picker-field")(h=class extends a.MultipleOptionsBase{static get properties(){return n.FieldBase.properties}SubRender(){let e=this.model.Options.ImageWidth,i=this.model.Options.ImageHeight;return null!=e&&(""==e.trim()?e=void 0:e.endsWith("%")||(e=parseFloat(e),isNaN(e)||0==e?e=void 0:e+="px")),null!=i&&(""==i.trim()?i=void 0:i.endsWith("%")||(i=parseFloat(i),isNaN(i)||0==i?i=void 0:i+="px")),t.html` <div class='rnImagePickerContainer'> ${s.repeat(this.model.OptionItemsToUse,(e=>e.Id),(r=>t.html` <div style="pointer-events: ${this.model.IsReadonly?"none":"auto"}" class=${"rnImagePickerItem "+(this.model.SelectedValues.some((e=>e==r.Id))?"rnSelected":"")} @click=${e=>this.model.ToggleSelection(r.Id)}> <div class='rnImagePickerImage' style="width: ${e};height: ${i};line-height: 0"> ${this.GetImageControl(r)} </div> ${o.rnIf(""!=r.Label.trim()&&t.html`<span>${r.Label.trim()}</span>`)} </div> `))} </div> `}GetImageControl(e){return"icon"==e.Icon.ImageType?this.GetImageContainer(t.html` <div style="font-size: 80px;text-align: center;"> <rn-icon-displayer .formBuilder="${this.model.FormBuilder}" .icon=${e.Icon} style="display: block"/> </div> `):"image"==e.Icon.ImageType?this.GetImageContainer(t.html` <img style="width: 100%;height: 100%;" src=${e.Icon.Ref.URL} alt=""/> `):null}GetImageContainer(e){return t.html` <div style="display: flex;align-items: center;justify-content: center;" class='RNButtonSelectorImageContainer'> ${e} </div> `}})||h;class M extends c.ItemOptions{LoadDefaultValues(){super.LoadDefaultValues(),this.Type="ImagePicker",this.Icon=(new u.IconOptions).Merge()}}var O,y,F;let B=(O=p.StoreDataType(M),y=class extends m.MultipleOptionsBaseOptions{constructor(...e){super(...e),babelHelpers.initializerDefineProperty(this,"Options",F,this)}LoadDefaultValues(){super.LoadDefaultValues(),this.ImageWidth="100%",this.ImageHeight="",this.Options=[],this.Type=i.FieldTypeEnum.ImagePicker,this.Label="Image Picker",this.Placeholder="",this.PriceType=d.PriceTypeEnum.options,this.AllowMultipleSelection=!1,this.Options=[(new M).Merge({Id:1,RegularPrice:"",Label:"Option 1",Icon:{}}),(new M).Merge({Id:2,RegularPrice:"",Label:"Option 2",Icon:{}}),(new M).Merge({Id:3,RegularPrice:"",Label:"Option 3",Icon:{}})]}},F=babelHelpers.applyDecoratedDescriptor(y.prototype,"Options",[O],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),y);exports.ImagePickerFieldModel=g,exports.ImagePickerField=I,exports.ImagePickerFieldOptions=B,e.EventManager.Subscribe("GetFieldOptions",(e=>{if(e==i.FieldTypeEnum.ImagePicker)return new B})),e.EventManager.Subscribe("GetFieldModel",(e=>{if(e.Options.Type==i.FieldTypeEnum.ImagePicker)return new g(e.Options,e.Parent)}))}));
