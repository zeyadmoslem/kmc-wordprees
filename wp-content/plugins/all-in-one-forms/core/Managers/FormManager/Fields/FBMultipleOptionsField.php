<?php


namespace rednaoeasycalculationforms\core\Managers\FormManager\Fields;


use Exception;
use rednaoeasycalculationforms\core\Managers\ConditionManager\ConditionManager;
use rednaoeasycalculationforms\core\Managers\SlateGenerator\Core\HtmlTagWrapper;
use rednaoeasycalculationforms\core\Utils\ArrayUtils;
use rednaoeasycalculationforms\DTO\ItemOptionsDTO;
use stdClass;

class FBMultipleOptionsField extends FBFieldWithPrice
{
    public $optionsToReturn=null;
    public $OptionsToUse=array();

    /**
     * @return ItemOptionsDTO[]
     */
    public function GetSelectedOptions(){
        if($this->Entry==null)
            return null;
        return $this->Entry->SelectedValues;
    }

    public function SanitizeEntry()
    {
        parent::SanitizeEntry(); // TODO: Change the autogenerated stub
        if($this->Entry==null)
            return;
        $selectedValues=[];
        foreach ($this->Entry->SelectedValues as &$entryOptions)
        {
            $this->OptionsToUse=$this->GetOptions();
            foreach($this->OptionsToUse as $originalOptions)
            {
                if($originalOptions->Id==$entryOptions->Id)
                {
                    $entryOptions =\json_decode(\json_encode($originalOptions));
                    $entryOptions->total=new stdClass();
                    $entryOptions->total->Price=0;
                    $entryOptions->total->Quantity=0;
                    $entryOptions->total->RegularPrice=0;
                    $entryOptions->total->SalePrice=0;


                    if(isset($originalOptions->SalePrice)&&\is_numeric($originalOptions->SalePrice))
                        $entryOptions->UnitPrice=\floatval($originalOptions->SalePrice);
                    else
                        $entryOptions->UnitPrice=\floatval($originalOptions->RegularPrice);
                    $entryOptions->Quantity=1;
                    $entryOptions->Price=$entryOptions->UnitPrice;
                    $entryOptions->Selected=true;
                    $selectedValues[]=$entryOptions->Label;
                }
            }
        }

    }

    public function GetColumnNumber($columnOrId){
        $selectedOptions=$this->GetSelectedOptions();
        $columnSearch=ArrayUtils::Find($this->Options->AdditionalOptionColumn,function ($item) use ($columnOrId){
           return $item->Id==$columnOrId||$item->Label==$columnOrId;
        });

        if($columnSearch==null)
            return null;

        $columnValues=array();
        foreach ($selectedOptions as $option)
        {
            $columnValue=ArrayUtils::Find($option->AdditionalOptionValue,function ($x) use ($columnSearch){return $x->Id==$columnSearch->Id;});
            if($columnValue!=null)
            {
                if(\is_numeric($columnValue->Value))
                {
                    $columnValues[]=\floatval($columnValue->Value);
                }
            }
        }

        return $columnValues;
    }

    public function GetLineItems()
    {
        $item= parent::GetLineItems()[0];

        $options=$this->GetSelectedOptions();

        $itemList=array();
        foreach($options as $currentOption)
        {
            $newItem=$item->CloneItem();
            $newItem->Value=$currentOption->Label;
            $newItem->UnitPrice=$currentOption->total->Price;
            $itemList[]=$newItem;
        }

       return $itemList;
    }


    public function GetValue(){
        return $this->GetSelectedOptions();
    }

    public function InternalToText()
    {
        if($this->GetRootForm()->IsTest)
            return '[Test Value]';
        $values=$this->GetValue();
        $labels=\array_map(function ($value){return $value->Label;},$this->GetValue());
        return \implode(', ',$labels);
    }

    public function GetHTMLTemplate($context=null)
    {
        return 'core/Managers/FormManager/Fields/FBMultipleOptionsField.twig';
    }


    protected function InternalGetHtml($document, $formatter=null){
        $tag=null;
        if(count($this->GetSelectedOptions())<=1)
        {
            $tag = new HtmlTagWrapper($document, $document->createElement('span'));
            $tag->SetText($this->ToText());
        }else{
            $tag=new HtmlTagWrapper($document,$document->createElement('ul'));
            $tag->AddStyle('padding',0);
            $tag->AddStyle('margin',0);


            foreach($this->GetSelectedOptions() as $option)
            {
                $item=$tag->CreateAndAppendChild('li');
                $item->AddStyle('padding',0);
                $item->AddStyle('margin',0);
                $item->AddStyle('margin-bottom','3px');
                $item->AddStyle('list-style-position','inside');
                $item->SetText($option->Label);
            }

        }
        return $tag;

    }

    public function ToNumber()
    {
        $selectedOptions=$this->GetSelectedOptions();
        $total=0;
        foreach($selectedOptions as $currentOption)
        {
            $regular=$currentOption->RegularPrice;
            if(!\is_numeric($regular))
                $regular=0;
            else
                $regular=\floatval($regular);

            $total+=$regular;

        }
        return $total;
    }

    public function  Contains($value)
    {
        return ArrayUtils::Find( $this->GetSelectedOptions(),function ($item)use($value){
            return $item->Label==$value;
        })!=null;

    }

    public function GetHtml($context = null)
    {
        if($this->GetRootForm()->IsTest)
            return '[Test Value]';
        return parent::GetHtml($context); // TODO: Change the autogenerated stub
    }


    private function GetOptions()
    {
        $condition=$this->GetConditionByType('Option');
        $conditionManager=new ConditionManager();
        foreach($condition as $currentCondition)
        {
            if($conditionManager->ShouldProcess($this->GetForm(),$currentCondition))
                return $currentCondition->Options;
        }
        return $this->Options->Options;
    }



}